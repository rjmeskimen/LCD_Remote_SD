CCS PCD C Compiler, Version 5.068, 34768               11-Apr-22 16:43

               Filename:   C:\Users\rjmes\Desktop\SD_PIC_LCD\Aux_Keypad_LED.lst

               ROM used:   5672 bytes (50%)
                           Largest free fragment is 5592
               RAM used:   152 (7%) at main() level
                           182 (9%) worst case
               Stack used: 90 locations (46 in main + 44 for interrupts)
               Stack size: 128

*
0000:  GOTO    13B6
*
0014:  DATA    EC,04,00
*
0050:  DATA    D4,03,00
.................... //#include <Lab 4 ECE 422.h> 
....................  
.................... #include <Aux_Keypad_LED.h> 
.................... #include <24FV16KM202.h> 
.................... //////////// Standard Header file for the PIC24FV16KM202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FV16KM202 
*
0200:  CLR     32
0202:  MOV     #20C,W3
0204:  ADD     W3,W0,W0
0206:  TBLRDL.B[W0],W0L
0208:  CLR.B   1
020A:  RETURN  
020C:  DATA    31,32,00
020E:  DATA    33,41,00
0210:  DATA    34,35,00
0212:  DATA    36,42,00
0214:  DATA    37,38,00
0216:  DATA    39,43,00
0218:  DATA    2A,30,00
021A:  DATA    23,44,00
021C:  CLR     32
021E:  MOV     #228,W3
0220:  ADD     W3,W0,W0
0222:  TBLRDL.B[W0],W0L
0224:  CLR.B   1
0226:  RETURN  
0228:  DATA    0A,0D,00
022A:  DATA    48,65,00
022C:  DATA    6C,6C,00
022E:  DATA    6F,2E,00
0230:  DATA    2E,2E,00
0232:  DATA    0A,0D,00
0234:  DATA    00,00,00
0236:  CLR     32
0238:  MOV     #242,W3
023A:  ADD     W3,W0,W0
023C:  TBLRDL.B[W0],W0L
023E:  CLR.B   1
0240:  RETURN  
0242:  DATA    50,6F,00
0244:  DATA    77,65,00
0246:  DATA    72,69,00
0248:  DATA    6E,67,00
024A:  DATA    20,4F,00
024C:  DATA    4E,00,00
024E:  CLR     32
0250:  MOV     #25A,W3
0252:  ADD     W3,W0,W0
0254:  TBLRDL.B[W0],W0L
0256:  CLR.B   1
0258:  RETURN  
025A:  DATA    53,69,00
025C:  DATA    6E,67,00
025E:  DATA    6C,65,00
0260:  DATA    20,53,00
0262:  DATA    61,6D,00
0264:  DATA    70,6C,00
0266:  DATA    65,0A,00
0268:  DATA    00,00,00
026A:  CLR     32
026C:  MOV     #276,W3
026E:  ADD     W3,W0,W0
0270:  TBLRDL.B[W0],W0L
0272:  CLR.B   1
0274:  RETURN  
0276:  DATA    53,77,00
0278:  DATA    65,65,00
027A:  DATA    70,0A,00
027C:  DATA    00,00,00
027E:  CLR     32
0280:  MOV     #28A,W3
0282:  ADD     W3,W0,W0
0284:  TBLRDL.B[W0],W0L
0286:  CLR.B   1
0288:  RETURN  
028A:  DATA    46,75,00
028C:  DATA    6C,6C,00
028E:  DATA    20,53,00
0290:  DATA    77,65,00
0292:  DATA    65,70,00
0294:  DATA    0A,00,00
0296:  CLR     32
0298:  MOV     #2A2,W3
029A:  ADD     W3,W0,W0
029C:  TBLRDL.B[W0],W0L
029E:  CLR.B   1
02A0:  RETURN  
02A2:  DATA    43,6C,00
02A4:  DATA    65,61,00
02A6:  DATA    72,0A,00
02A8:  DATA    00,00,00
02AA:  CLR     32
02AC:  MOV     #2B6,W3
02AE:  ADD     W3,W0,W0
02B0:  TBLRDL.B[W0],W0L
02B2:  CLR.B   1
02B4:  RETURN  
02B6:  DATA    46,72,00
02B8:  DATA    65,71,00
02BA:  DATA    75,65,00
02BC:  DATA    6E,63,00
02BE:  DATA    79,3A,00
02C0:  DATA    0A,00,00
02C2:  CLR     32
02C4:  MOV     #2CE,W3
02C6:  ADD     W3,W0,W0
02C8:  TBLRDL.B[W0],W0L
02CA:  CLR.B   1
02CC:  RETURN  
02CE:  DATA    31,20,00
02D0:  DATA    2D,20,00
02D2:  DATA    32,30,00
02D4:  DATA    30,6B,00
02D6:  DATA    20,48,00
02D8:  DATA    7A,0A,00
02DA:  DATA    00,00,00
02DC:  CLR     32
02DE:  MOV     #2E8,W3
02E0:  ADD     W3,W0,W0
02E2:  TBLRDL.B[W0],W0L
02E4:  CLR.B   1
02E6:  RETURN  
02E8:  DATA    31,20,00
02EA:  DATA    2D,20,00
02EC:  DATA    31,30,00
02EE:  DATA    20,48,00
02F0:  DATA    7A,0A,00
02F2:  DATA    00,00,00
02F4:  CLR     32
02F6:  MOV     #300,W3
02F8:  ADD     W3,W0,W0
02FA:  TBLRDL.B[W0],W0L
02FC:  CLR.B   1
02FE:  RETURN  
0300:  DATA    31,30,00
0302:  DATA    20,2D,00
0304:  DATA    20,31,00
0306:  DATA    30,30,00
0308:  DATA    20,48,00
030A:  DATA    7A,0A,00
030C:  DATA    00,00,00
030E:  CLR     32
0310:  MOV     #31A,W3
0312:  ADD     W3,W0,W0
0314:  TBLRDL.B[W0],W0L
0316:  CLR.B   1
0318:  RETURN  
031A:  DATA    31,30,00
031C:  DATA    30,20,00
031E:  DATA    2D,20,00
0320:  DATA    31,6B,00
0322:  DATA    20,48,00
0324:  DATA    7A,0A,00
0326:  DATA    00,00,00
0328:  CLR     32
032A:  MOV     #334,W3
032C:  ADD     W3,W0,W0
032E:  TBLRDL.B[W0],W0L
0330:  CLR.B   1
0332:  RETURN  
0334:  DATA    31,6B,00
0336:  DATA    20,2D,00
0338:  DATA    20,31,00
033A:  DATA    30,6B,00
033C:  DATA    20,48,00
033E:  DATA    7A,0A,00
0340:  DATA    00,00,00
0342:  CLR     32
0344:  MOV     #34E,W3
0346:  ADD     W3,W0,W0
0348:  TBLRDL.B[W0],W0L
034A:  CLR.B   1
034C:  RETURN  
034E:  DATA    31,30,00
0350:  DATA    6B,20,00
0352:  DATA    2D,20,00
0354:  DATA    31,30,00
0356:  DATA    30,6B,00
0358:  DATA    20,48,00
035A:  DATA    7A,0A,00
035C:  DATA    00,00,00
035E:  CLR     32
0360:  MOV     #36A,W3
0362:  ADD     W3,W0,W0
0364:  TBLRDL.B[W0],W0L
0366:  CLR.B   1
0368:  RETURN  
036A:  DATA    31,30,00
036C:  DATA    30,6B,00
036E:  DATA    20,2D,00
0370:  DATA    20,32,00
0372:  DATA    30,30,00
0374:  DATA    6B,20,00
0376:  DATA    48,7A,00
0378:  DATA    0A,00,00
037A:  CLR     32
037C:  MOV     #386,W3
037E:  ADD     W3,W0,W0
0380:  TBLRDL.B[W0],W0L
0382:  CLR.B   1
0384:  RETURN  
0386:  DATA    53,79,00
0388:  DATA    73,74,00
038A:  DATA    65,6D,00
038C:  DATA    20,69,00
038E:  DATA    73,20,00
0390:  DATA    42,75,00
0392:  DATA    73,79,00
0394:  DATA    00,00,00
0396:  CLR     32
0398:  MOV     #3A2,W3
039A:  ADD     W3,W0,W0
039C:  TBLRDL.B[W0],W0L
039E:  CLR.B   1
03A0:  RETURN  
03A2:  DATA    54,65,00
03A4:  DATA    72,6D,00
03A6:  DATA    69,6E,00
03A8:  DATA    61,6C,00
03AA:  DATA    20,43,00
03AC:  DATA    6C,65,00
03AE:  DATA    61,72,00
03B0:  DATA    00,00,00
*
0A5C:  MOV     W6,[W15++]
0A5E:  MOV     W7,[W15++]
0A60:  MOV     W8,[W15++]
0A62:  MOV     W9,[W15++]
0A64:  CLR     W4
0A66:  CLR     W5
0A68:  CLR     W6
0A6A:  CLR     W7
0A6C:  XOR     W2,W3,W8
0A6E:  BRA     Z,A92
0A70:  MOV     #20,W8
0A72:  BCLR.B  42.0
0A74:  RLC     W0,W0
0A76:  RLC     W1,W1
0A78:  RLC     W4,W4
0A7A:  RLC     W5,W5
0A7C:  CP      W5,W3
0A7E:  BRA     NZ,A82
0A80:  CPB     W4,W2
0A82:  BRA     NC,A8A
0A84:  SUB     W4,W2,W4
0A86:  SUBB    W5,W3,W5
0A88:  BSET.B  42.0
0A8A:  RLC     W6,W6
0A8C:  RLC     W7,W7
0A8E:  DEC     W8,W8
0A90:  BRA     NZ,A72
0A92:  MOV     W7,W1
0A94:  MOV     W6,W0
0A96:  MOV     [--W15],W9
0A98:  MOV     [--W15],W8
0A9A:  MOV     [--W15],W7
0A9C:  MOV     [--W15],W6
0A9E:  RETURN  
0AA0:  MOV     W5,[W15++]
0AA2:  MOV     #C,W5
0AA4:  REPEAT  #7
0AA6:  MOV     [W5++],[W15++]
0AA8:  BTSS    W1.F
0AAA:  BRA     ABA
0AAC:  NEG     W0,W0
0AAE:  BRA     Z,AB2
0AB0:  BRA     NZ,AB6
0AB2:  NEG     W1,W1
0AB4:  BRA     AB8
0AB6:  COM     W1,W1
0AB8:  BSET    W4.8
0ABA:  CLR     W5
0ABC:  MOV     W0,W6
0ABE:  MOV     W1,W7
0AC0:  MOV     W4,W12
0AC2:  BCLR    W4.F
0AC4:  CP0.B   W4L
0AC6:  BRA     NZ,ACA
0AC8:  BRA     B0E
0ACA:  SUB.B   W4L,#B,W5L
0ACC:  BRA     NC,B0E
0ACE:  SUB.B   W4L,W5L,W4L
0AD0:  BTSS    W12.F
0AD2:  BRA     AF2
0AD4:  BTSS    W4.8
0AD6:  BRA     AEE
0AD8:  MOV     #2D,W0
0ADA:  MOV     W1,[W15++]
0ADC:  MOV     W4,[W15++]
0ADE:  MOV.B   W0L,81C
0AE0:  CALL    700
0AE4:  MOV     [--W15],W4
0AE6:  MOV     [--W15],W1
0AE8:  BCLR    W4.8
0AEA:  DEC     W5,W5
0AEC:  BRA     N,B0E
0AEE:  MOV     #30,W0
0AF0:  BRA     AF4
0AF2:  MOV     #20,W0
0AF4:  MOV     W0,[W15++]
0AF6:  MOV     W1,[W15++]
0AF8:  MOV     W4,[W15++]
0AFA:  MOV.B   W0L,81C
0AFC:  CALL    700
0B00:  MOV     [--W15],W4
0B02:  MOV     [--W15],W1
0B04:  MOV     [--W15],W0
0B06:  DEC     W5,W5
0B08:  BRA     NN,AF4
0B0A:  BTSC    W4.8
0B0C:  DEC.B   W4L,W4L
0B0E:  MOV     #E,W8
0B10:  MOV     #0,W9
0B12:  LNK     #10
0B14:  MOV     W12,[W14+W8]
0B16:  DEC2    W8,W8
0B18:  BRA     NN,B14
0B1A:  MOV     W4,W5
0B1C:  MOV     #A,W4
0B1E:  BTSC    W5.8
0B20:  INC     W4,W4
0B22:  BSET    W5.E
0B24:  BTSC    W12.F
0B26:  BSET    W5.F
0B28:  CP0.B   W5L
0B2A:  BRA     Z,B2E
0B2C:  DEC.B   W5L,W5L
0B2E:  MOV     W4,[W14]
0B30:  MOV     W5,[W14+#2]
0B32:  MOV     W6,W0
0B34:  MOV     W7,W1
0B36:  MOV     #CA00,W2
0B38:  MOV     #3B9A,W3
0B3A:  MOV     #2710,W8
0B3C:  BCLR    W13.F
0B3E:  BCLR.B  43.0
0B40:  CALL    A5C
0B44:  BTG     W13.F
0B46:  BTSC    W13.F
0B48:  BRA     B58
0B4A:  MOV     W0,[W14+#8]
0B4C:  MOV     W1,[W14+#A]
0B4E:  MOV     W0,W2
0B50:  MOV     W1,W3
0B52:  MOV     [W14+#4],W0
0B54:  MOV     [W14+#6],W1
0B56:  BRA     B3E
0B58:  MOV     W2,[W14+#8]
0B5A:  MOV     W3,[W14+#A]
0B5C:  MOV     W4,[W14+#4]
0B5E:  MOV     W5,[W14+#6]
0B60:  MOV     [W14],W4
0B62:  MOV     [W14+#2],W5
0B64:  MOV     #30,W6
0B66:  CP0     W0
0B68:  BRA     NZ,B8C
0B6A:  BTSS    W5.E
0B6C:  BRA     B90
0B6E:  DEC     W4,W4
0B70:  MOV     W4,[W14]
0B72:  CP0     W4
0B74:  BRA     Z,B90
0B76:  CP.B    W4L,W5L
0B78:  BRA     Z,B7E
0B7A:  BTSC.B  42.0
0B7C:  BRA     BB6
0B7E:  BTSS    W5.F
0B80:  BRA     B88
0B82:  BTSS    W5.8
0B84:  BRA     BAA
0B86:  BRA     B96
0B88:  MOV     #20,W6
0B8A:  BRA     BAA
0B8C:  BCLR    W5.E
0B8E:  MOV     W5,[W14+#2]
0B90:  MOV     [W14+#2],W5
0B92:  BTSS    W5.8
0B94:  BRA     BAA
0B96:  BCLR    W5.8
0B98:  MOV     W5,[W14+#2]
0B9A:  MOV     W0,W10
0B9C:  MOV     #2D,W0
0B9E:  MOV     W4,[W15++]
0BA0:  MOV.B   W0L,81C
0BA2:  CALL    700
0BA6:  MOV     [--W15],W4
0BA8:  MOV     W10,W0
0BAA:  ADD.B   W6L,W0L,W0L
0BAC:  MOV     W4,[W15++]
0BAE:  MOV.B   W0L,81C
0BB0:  CALL    700
0BB4:  MOV     [--W15],W4
0BB6:  MOV     [W14+#8],W0
0BB8:  MOV     [W14+#A],W1
0BBA:  MOV     #A,W2
0BBC:  CLR     W3
0BBE:  CP      W0,#1
0BC0:  BRA     Z,BC4
0BC2:  BRA     B3E
0BC4:  ULNK    
0BC6:  MOV     #1A,W5
0BC8:  REPEAT  #7
0BCA:  MOV     [--W15],[W5--]
0BCC:  MOV     [--W15],W5
0BCE:  RETURN  
*
103E:  MOV     W5,[W15++]
1040:  MOV     #C,W5
1042:  REPEAT  #3
1044:  MOV     [W5++],[W15++]
1046:  MUL.UU  W0,W2,W4
1048:  BTSS    W3.F
104A:  BRA     1050
104C:  MUL.SS  W0,W3,W6
104E:  BRA     1052
1050:  MUL.UU  W0,W3,W6
1052:  BCLR.B  42.0
1054:  ADD     W6,W5,W5
1056:  ADDC    W7,#0,W8
1058:  BTSS    W1.F
105A:  BRA     1060
105C:  MUL.SS  W1,W2,W6
105E:  BRA     1062
1060:  MUL.UU  W1,W2,W6
1062:  ADDC    W6,W5,W5
1064:  ADDC    W7,W8,W8
1066:  ADDC    #0,W9
1068:  MUL.SS  W1,W3,W6
106A:  ADDC    W6,W8,W8
106C:  ADDC    W9,W7,W7
106E:  MOV     W7,W3
1070:  MOV     W8,W2
1072:  MOV     W5,W1
1074:  MOV     W4,W0
1076:  MOV     #12,W5
1078:  REPEAT  #3
107A:  MOV     [--W15],[W5--]
107C:  MOV     [--W15],W5
107E:  RETURN  
1080:  MOV     W5,[W15++]
1082:  MOV     #C,W5
1084:  REPEAT  #3
1086:  MOV     [W5++],[W15++]
1088:  MOV     #0,W9
108A:  BTSC.B  43.0
108C:  MOV     #1,W9
108E:  MOV     W9,[W15++]
1090:  XOR     W1,W3,W9
1092:  BTSS    W1.F
1094:  BRA     109C
1096:  COM     W1,W1
1098:  NEG     W0,W0
109A:  ADDC    W1,#0,W1
109C:  BTSS    W3.F
109E:  BRA     10A6
10A0:  COM     W3,W3
10A2:  NEG     W2,W2
10A4:  ADDC    W3,#0,W3
10A6:  XOR     W2,W3,W4
10A8:  BRA     Z,10D4
10AA:  CLR     W4
10AC:  CLR     W5
10AE:  CLR     W6
10B0:  CLR     W7
10B2:  MOV     #20,W8
10B4:  BCLR.B  42.0
10B6:  RLC     W0,W0
10B8:  RLC     W1,W1
10BA:  RLC     W4,W4
10BC:  RLC     W5,W5
10BE:  CP      W5,W3
10C0:  BRA     NZ,10C4
10C2:  CPB     W4,W2
10C4:  BRA     NC,10CC
10C6:  SUB     W4,W2,W4
10C8:  SUBB    W5,W3,W5
10CA:  BSET.B  42.0
10CC:  RLC     W6,W6
10CE:  RLC     W7,W7
10D0:  DEC     W8,W8
10D2:  BRA     NZ,10B4
10D4:  BTSS    W9.F
10D6:  BRA     10E6
10D8:  NEG     W6,W0
10DA:  BRA     Z,10DE
10DC:  BRA     NZ,10E2
10DE:  NEG     W7,W1
10E0:  BRA     10EC
10E2:  COM     W7,W1
10E4:  BRA     10EC
10E6:  MOV     W7,W1
10E8:  MOV     W6,W0
10EA:  BRA     10EC
10EC:  MOV     [--W15],W9
10EE:  CP0     W9
10F0:  BRA     Z,10F4
10F2:  MOV.D   W4,W0
10F4:  MOV     #12,W5
10F6:  REPEAT  #3
10F8:  MOV     [--W15],[W5--]
10FA:  MOV     [--W15],W5
10FC:  RETURN  
10FE:  MOV     W5,[W15++]
1100:  MOV     #C,W5
1102:  REPEAT  #7
1104:  MOV     [W5++],[W15++]
1106:  BTSS    W1.F
1108:  BRA     1118
110A:  NEG     W0,W0
110C:  BRA     Z,1110
110E:  BRA     NZ,1114
1110:  NEG     W1,W1
1112:  BRA     1116
1114:  COM     W1,W1
1116:  BSET    W4.8
1118:  CLR     W5
111A:  MOV     W0,W6
111C:  MOV     W1,W7
111E:  MOV     W4,W12
1120:  BCLR    W4.F
1122:  CP0.B   W4L
1124:  BRA     NZ,1128
1126:  BRA     115C
1128:  SUB.B   W4L,#B,W5L
112A:  BRA     NC,115C
112C:  SUB.B   W4L,W5L,W4L
112E:  BTSS    W12.F
1130:  BRA     1148
1132:  BTSS    W4.8
1134:  BRA     1144
1136:  MOV     #2D,W0
1138:  BTSS.B  233.0
113A:  BRA     1138
113C:  MOV     W0,234
113E:  BCLR    W4.8
1140:  DEC     W5,W5
1142:  BRA     N,115C
1144:  MOV     #30,W0
1146:  BRA     114A
1148:  MOV     #20,W0
114A:  MOV     W0,[W15++]
114C:  BTSS.B  233.0
114E:  BRA     114C
1150:  MOV     W0,234
1152:  MOV     [--W15],W0
1154:  DEC     W5,W5
1156:  BRA     NN,114A
1158:  BTSC    W4.8
115A:  DEC.B   W4L,W4L
115C:  MOV     #E,W8
115E:  MOV     #0,W9
1160:  LNK     #10
1162:  MOV     W12,[W14+W8]
1164:  DEC2    W8,W8
1166:  BRA     NN,1162
1168:  MOV     W4,W5
116A:  MOV     #A,W4
116C:  BTSC    W5.8
116E:  INC     W4,W4
1170:  BSET    W5.E
1172:  BTSC    W12.F
1174:  BSET    W5.F
1176:  CP0.B   W5L
1178:  BRA     Z,117C
117A:  DEC.B   W5L,W5L
117C:  MOV     W4,[W14]
117E:  MOV     W5,[W14+#2]
1180:  MOV     W6,W0
1182:  MOV     W7,W1
1184:  MOV     #CA00,W2
1186:  MOV     #3B9A,W3
1188:  MOV     #2710,W8
118A:  BCLR    W13.F
118C:  BCLR.B  43.0
118E:  CALL    A5C
1192:  BTG     W13.F
1194:  BTSC    W13.F
1196:  BRA     11A6
1198:  MOV     W0,[W14+#8]
119A:  MOV     W1,[W14+#A]
119C:  MOV     W0,W2
119E:  MOV     W1,W3
11A0:  MOV     [W14+#4],W0
11A2:  MOV     [W14+#6],W1
11A4:  BRA     118C
11A6:  MOV     W2,[W14+#8]
11A8:  MOV     W3,[W14+#A]
11AA:  MOV     W4,[W14+#4]
11AC:  MOV     W5,[W14+#6]
11AE:  MOV     [W14],W4
11B0:  MOV     [W14+#2],W5
11B2:  MOV     #30,W6
11B4:  CP0     W0
11B6:  BRA     NZ,11DA
11B8:  BTSS    W5.E
11BA:  BRA     11DE
11BC:  DEC     W4,W4
11BE:  MOV     W4,[W14]
11C0:  CP0     W4
11C2:  BRA     Z,11DE
11C4:  CP.B    W4L,W5L
11C6:  BRA     Z,11CC
11C8:  BTSC.B  42.0
11CA:  BRA     11FC
11CC:  BTSS    W5.F
11CE:  BRA     11D6
11D0:  BTSS    W5.8
11D2:  BRA     11F4
11D4:  BRA     11E4
11D6:  MOV     #20,W6
11D8:  BRA     11F4
11DA:  BCLR    W5.E
11DC:  MOV     W5,[W14+#2]
11DE:  MOV     [W14+#2],W5
11E0:  BTSS    W5.8
11E2:  BRA     11F4
11E4:  BCLR    W5.8
11E6:  MOV     W5,[W14+#2]
11E8:  MOV     W0,W10
11EA:  MOV     #2D,W0
11EC:  BTSS.B  233.0
11EE:  BRA     11EC
11F0:  MOV     W0,234
11F2:  MOV     W10,W0
11F4:  ADD.B   W6L,W0L,W0L
11F6:  BTSS.B  233.0
11F8:  BRA     11F6
11FA:  MOV     W0,234
11FC:  MOV     [W14+#8],W0
11FE:  MOV     [W14+#A],W1
1200:  MOV     #A,W2
1202:  CLR     W3
1204:  CP      W0,#1
1206:  BRA     Z,120A
1208:  BRA     118C
120A:  ULNK    
120C:  MOV     #1A,W5
120E:  REPEAT  #7
1210:  MOV     [--W15],[W5--]
1212:  MOV     [--W15],W5
1214:  RETURN  
1216:  MOV     W5,[W15++]
1218:  MOV     #C,W5
121A:  REPEAT  #3
121C:  MOV     [W5++],[W15++]
121E:  BTSS    W0.F
1220:  BRA     123A
1222:  NEG     W0,W0
1224:  BSET    W4.8
1226:  BTSS    W4.F
1228:  BRA     123A
122A:  MOV     W0,[W15++]
122C:  MOV     #2D,W0
122E:  BTSS.B  233.0
1230:  BRA     122E
1232:  MOV     W0,234
1234:  MOV     [--W15],W0
1236:  BCLR    W4.8
1238:  DEC.B   0008
123A:  CLR     W5
123C:  MOV     W0,W7
123E:  MOV     W4,W9
1240:  BCLR    W4.F
1242:  CP0.B   W4L
1244:  BRA     NZ,1252
1246:  BTSC    W9.F
1248:  BRA     124E
124A:  MOV     #0,W5
124C:  BRA     1276
124E:  MOV     #0,W5
1250:  BRA     1276
1252:  BTSS    W9.8
1254:  SUB.B   W4L,#6,W5L
1256:  BTSC    W9.8
1258:  SUB.B   W4L,#7,W5L
125A:  BRA     NC,1274
125C:  MOV     #30,W0
125E:  BTSS    W9.F
1260:  MOV     #20,W0
1262:  MOV     W0,[W15++]
1264:  BTSS.B  233.0
1266:  BRA     1264
1268:  MOV     W0,234
126A:  MOV     [--W15],W0
126C:  DEC     W5,W5
126E:  BRA     NN,1262
1270:  MOV     #5,W5
1272:  BRA     1276
1274:  MOV     W4,W5
1276:  MOV     #6,W4
1278:  BTSC    W5.8
127A:  INC     W4,W4
127C:  BSET    W5.E
127E:  BTSC    W9.F
1280:  BSET    W5.F
1282:  MOV     #2710,W8
1284:  REPEAT  #11
1286:  DIV.U   W7,W8
1288:  CALL    12CC
128C:  MOV     W1,W7
128E:  MOV     #3E8,W8
1290:  REPEAT  #11
1292:  DIV.U   W7,W8
1294:  CALL    12CC
1298:  MOV     W1,W7
129A:  MOV     #64,W8
129C:  REPEAT  #11
129E:  DIV.U   W7,W8
12A0:  CALL    12CC
12A4:  MOV     W1,W7
12A6:  MOV     #A,W8
12A8:  REPEAT  #11
12AA:  DIV.U   W7,W8
12AC:  CALL    12CC
12B0:  BTSS    W9.8
12B2:  BRA     12BE
12B4:  MOV     #2D,W0
12B6:  BTSS.B  233.0
12B8:  BRA     12B6
12BA:  MOV     W0,234
12BC:  BCLR    W9.8
12BE:  MOV     #30,W0
12C0:  ADD.B   W1L,W0L,W0L
12C2:  MOV     W0,2A
12C4:  BTSS.B  233.0
12C6:  BRA     12C4
12C8:  MOV     W0,234
12CA:  BRA     130C
12CC:  MOV     #30,W6
12CE:  CP0     W0
12D0:  BRA     NZ,12EE
12D2:  BTSS    W5.E
12D4:  BRA     1302
12D6:  DEC     W4,W4
12D8:  CP.B    W4L,W5L
12DA:  BRA     Z,12E0
12DC:  BTSC.B  42.0
12DE:  RETURN  
12E0:  CP0     W0
12E2:  BRA     NZ,12EE
12E4:  BTSS    W5.E
12E6:  BRA     1302
12E8:  BTSS    W5.F
12EA:  MOV     #20,W6
12EC:  BRA     1302
12EE:  BCLR    W5.E
12F0:  BTSS    W9.8
12F2:  BRA     1302
12F4:  MOV     W0,W10
12F6:  MOV     #2D,W0
12F8:  BTSS.B  233.0
12FA:  BRA     12F8
12FC:  MOV     W0,234
12FE:  BCLR    W9.8
1300:  MOV     W10,W0
1302:  ADD.B   W6L,W0L,W0L
1304:  BTSS.B  233.0
1306:  BRA     1304
1308:  MOV     W0,234
130A:  RETURN  
130C:  MOV     #12,W5
130E:  REPEAT  #3
1310:  MOV     [--W15],[W5--]
1312:  MOV     [--W15],W5
1314:  RETURN  
....................  
.................... #list 
....................  
.................... #device ICSP=3 
.................... #use delay(internal=32MHz) 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV_LOW                 //Brown-out Reset set to lowest voltage 
....................  
.................... void disableKeypad(void); 
.................... void enableKeypad(void); 
....................  
.................... void clearLine(void); 
.................... void lcdShift(); 
.................... void systemInit(void); 
.................... void menuRefresh(int); 
....................  
.................... void readFrequency(void); 
.................... void enterState(int state); 
.................... void sweepRefresh(int selected); 
.................... void waitForResponse(void); 
....................  
.................... void screenClearedDisplay(void); 
....................  
....................  
.................... //Already Declared in .h file 
.................... //#include <24FV16KM202.h> 
....................  
.................... #FUSES FRC_PLL 
....................  
.................... #use delay(clock = 32MHZ, internal = 8MHZ) 
*
0514:  CP0     W0
0516:  BTSC.B  42.1
0518:  BRA     522
051A:  REPEAT  #3E7B
051C:  NOP     
051E:  DEC     W0,W0
0520:  BRA     NZ,51A
0522:  RETURN  
.................... #use fast_io(B) 
....................  
.................... //Serial Port communication 
.................... #USE RS232(UART2, BAUD = 115200, PARITY = N, BITS = 8, STOP = 1, TIMEOUT = 500) 
*
03B2:  MOV     W5,[W15++]
03B4:  MOV     #4B00,W5
03B6:  REPEAT  #19E
03B8:  NOP     
03BA:  DEC     W5,W5
03BC:  BRA     NZ,3C4
03BE:  CLR     800
03C0:  MOV     #0,W0
03C2:  BRA     3D0
03C4:  BTSS.B  232.0
03C6:  BRA     3B6
03C8:  PUSH    232
03CA:  POP     800
03CC:  MOV     236,W0
03CE:  BCLR.B  232.1
03D0:  MOV     [--W15],W5
03D2:  RETURN  
....................  
.................... //DEFINE LCD PINS 
.................... #define LCD_ENABLE_PIN  PIN_A7 
.................... #define LCD_RS_PIN      PIN_B8 
.................... #define LCD_RW_PIN      PIN_B9 
.................... #define LCD_DATA4       PIN_B12 
.................... #define LCD_DATA5       PIN_B13 
.................... #define LCD_DATA6       PIN_B14 
.................... #define LCD_DATA7       PIN_B15 
.................... #define LED_PIN         PIN_A2 
....................  
.................... #define LCD_EXTENDED_NEWLINE //Include for enable 4 line LED 
....................  
.................... #include <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINEis defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
....................  
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... //Added to Create newline - Reece Meskimen ! 
.................... //#ifndef LCD_EXTENDED_NEWLINE 
.................... //   #define LCD_EXTENDED_NEWLINE 
.................... //#endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE  2         // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_THREE 
....................    #define LCD_LINE_THREE 0x14    // LCD RAM address for the third line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_FOUR 
....................    #define LCD_LINE_FOUR 0x54    // LCD RAM address for the fourth line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
*
0594:  MOV     W5,[W15++]
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
0596:  BSET.B  2C9.4
....................    output_float(LCD_DATA5); 
0598:  BSET.B  2C9.5
....................    output_float(LCD_DATA6); 
059A:  BSET.B  2C9.6
....................    output_float(LCD_DATA7); 
059C:  BSET.B  2C9.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
059E:  BSET.B  2CD.1
....................    delay_cycles(1); 
05A0:  NOP     
....................    lcd_output_enable(1); 
05A2:  BSET.B  2C4.7
05A4:  BCLR.B  2C0.7
....................    delay_cycles(1); 
05A6:  NOP     
....................    high = lcd_read_nibble(); 
05A8:  CALL    55C
05AC:  MOV.B   W0L,82F
....................        
....................    lcd_output_enable(0); 
05AE:  BCLR.B  2C4.7
05B0:  BCLR.B  2C0.7
....................    delay_cycles(1); 
05B2:  NOP     
....................    lcd_output_enable(1); 
05B4:  BSET.B  2C4.7
05B6:  BCLR.B  2C0.7
....................    delay_us(1); 
05B8:  REPEAT  #E
05BA:  NOP     
....................    low = lcd_read_nibble(); 
05BC:  CALL    55C
05C0:  MOV.B   W0L,82E
....................        
....................    lcd_output_enable(0); 
05C2:  BCLR.B  2C4.7
05C4:  BCLR.B  2C0.7
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
05C6:  BCLR.B  2C9.4
....................    output_drive(LCD_DATA5); 
05C8:  BCLR.B  2C9.5
....................    output_drive(LCD_DATA6); 
05CA:  BCLR.B  2C9.6
....................    output_drive(LCD_DATA7); 
05CC:  BCLR.B  2C9.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
05CE:  MOV     82E,W5
05D0:  LSR     W5,#8,W5
05D2:  SL      W5,#4,W5
05D4:  MOV.B   82E,W0L
05D6:  CLR.B   1
05D8:  IOR      W5,  W0,W0
05DA:  MOV     [--W15],W5
05DC:  RETURN  
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
055C:  MOV     W5,[W15++]
055E:  CLR.B   830
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0560:  CLR     W0
0562:  BTSC.B  2CB.4
0564:  INC     W0,W0
0566:  IOR.B   830
....................    n |= input(LCD_DATA5) << 1; 
0568:  CLR     W0
056A:  BTSC.B  2CB.5
056C:  INC     W0,W0
056E:  CLR.B   1
0570:  SL      W0,#1,W0
0572:  IOR.B   830
....................    n |= input(LCD_DATA6) << 2; 
0574:  CLR     W0
0576:  BTSC.B  2CB.6
0578:  INC     W0,W0
057A:  CLR.B   1
057C:  SL      W0,#2,W0
057E:  IOR.B   830
....................    n |= input(LCD_DATA7) << 3; 
0580:  CLR     W0
0582:  BTSC.B  2CB.7
0584:  INC     W0,W0
0586:  CLR.B   1
0588:  SL      W0,#3,W0
058A:  IOR.B   830
....................     
....................    return(n); 
058C:  MOV.B   830,W0L
058E:  MOV.B   W0L,0
....................   #else 
0590:  MOV     [--W15],W5
0592:  RETURN  
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0524:  BTSC.B  830.0
0526:  BRA     52C
0528:  BCLR.B  2CD.4
052A:  BRA     52E
052C:  BSET.B  2CD.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
052E:  BTSC.B  830.1
0530:  BRA     536
0532:  BCLR.B  2CD.5
0534:  BRA     538
0536:  BSET.B  2CD.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0538:  BTSC.B  830.2
053A:  BRA     540
053C:  BCLR.B  2CD.6
053E:  BRA     542
0540:  BSET.B  2CD.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0542:  BTSC.B  830.3
0544:  BRA     54A
0546:  BCLR.B  2CD.7
0548:  BRA     54C
054A:  BSET.B  2CD.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
054C:  NOP     
....................    lcd_output_enable(1); 
054E:  BSET.B  2C4.7
0550:  BCLR.B  2C0.7
....................    delay_us(2); 
0552:  REPEAT  #1E
0554:  NOP     
....................    lcd_output_enable(0); 
0556:  BCLR.B  2C4.7
0558:  BCLR.B  2C0.7
055A:  RETURN  
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
*
05DE:  MOV     W5,[W15++]
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
05E0:  BCLR.B  2C0.7
....................    lcd_rs_tris(); 
05E2:  BCLR.B  2C9.0
....................    lcd_rw_tris(); 
05E4:  BCLR.B  2C9.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
05E6:  BCLR.B  2CD.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
05E8:  CALL    594
05EC:  MOV.B   W0L,W5L
05EE:  BTSC    W5.7
05F0:  BRA     5E8
....................    lcd_output_rs(address); 
05F2:  CP0.B   82A
05F4:  BRA     NZ,5FA
05F6:  BCLR.B  2CD.0
05F8:  BRA     5FC
05FA:  BSET.B  2CD.0
....................    delay_cycles(1); 
05FC:  NOP     
....................    lcd_output_rw(0); 
05FE:  BCLR.B  2CD.1
....................    delay_cycles(1); 
0600:  NOP     
....................    lcd_output_enable(0); 
0602:  BCLR.B  2C4.7
0604:  BCLR.B  2C0.7
....................    lcd_send_nibble(n >> 4); 
0606:  MOV     82A,W5
0608:  LSR     W5,#8,W5
060A:  LSR     W5,#4,W5
060C:  PUSH    830
060E:  MOV.B   W5L,[W15-#2]
0610:  POP     830
0612:  CALL    524
....................    lcd_send_nibble(n & 0xf); 
0616:  MOV.B   82B,W0L
0618:  CLR.B   1
061A:  AND     W0,#F,W5
061C:  PUSH    830
061E:  MOV.B   W5L,[W15-#2]
0620:  POP     830
0622:  CALL    524
0626:  MOV     [--W15],W5
0628:  RETURN  
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
062A:  MOV     W5,[W15++]
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
062C:  MOV     #C28,W4
062E:  MOV     W4,816
0630:  MOV     #601,W4
0632:  MOV     W4,818
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0634:  BCLR.B  2C4.7
0636:  BCLR.B  2C0.7
....................    lcd_output_rs(0); 
0638:  BCLR.B  2CD.0
....................    lcd_output_rw(0); 
063A:  BCLR.B  2CD.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
063C:  BCLR.B  2C9.4
....................    output_drive(LCD_DATA5); 
063E:  BCLR.B  2C9.5
....................    output_drive(LCD_DATA6); 
0640:  BCLR.B  2C9.6
....................    output_drive(LCD_DATA7); 
0642:  BCLR.B  2C9.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0644:  BCLR.B  2C0.7
....................    lcd_rs_tris(); 
0646:  BCLR.B  2C9.0
....................    lcd_rw_tris(); 
0648:  BCLR.B  2C9.1
....................  #endif 
....................      
....................    delay_ms(15); 
064A:  MOV     #F,W0
064C:  CALL    514
....................    for(i=1;i<=3;++i) 
0650:  MOV.B   #1,W0L
0652:  MOV.B   W0L,814
0654:  MOV     814,W4
0656:  CP.B    W4L,#3
0658:  BRA     GTU,66C
....................    { 
....................        lcd_send_nibble(3); 
065A:  MOV.B   #3,W0L
065C:  MOV.B   W0L,830
065E:  CALL    524
....................        delay_ms(5); 
0662:  MOV     #5,W0
0664:  CALL    514
0668:  INC.B   0814
066A:  BRA     654
....................    } 
....................     
....................    lcd_send_nibble(2); 
066C:  MOV.B   #2,W0L
066E:  MOV.B   W0L,830
0670:  CALL    524
....................    delay_ms(5); 
0674:  MOV     #5,W0
0676:  CALL    514
....................    for(i=0;i<=3;++i) 
067A:  CLR.B   814
067C:  MOV     814,W4
067E:  CP.B    W4L,#3
0680:  BRA     GTU,69C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0682:  MOV     814,W4
0684:  CLR.B   9
0686:  MOV     #816,W3
0688:  ADD     W4,W3,W0
068A:  MOV.B   [W0],W5L
068C:  CLR.B   82A
068E:  PUSH    82A
0690:  MOV.B   W5L,[W15-#1]
0692:  POP     82A
0694:  CALL    5DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0698:  INC.B   0814
069A:  BRA     67C
....................    g_LcdX = 0; 
069C:  CLR.B   802
....................    g_LcdY = 0; 
069E:  CLR.B   803
....................   #endif 
06A0:  MOV     [--W15],W5
06A2:  RETURN  
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
06A4:  MOV     W5,[W15++]
.................... { 
....................    unsigned int8 address; 
....................     
....................    //Added to Create newline - Reece Meskimen ! 
....................    if(y == 2) 
06A6:  MOV     822,W4
06A8:  LSR     W4,#8,W4
06AA:  CP.B    W4L,#2
06AC:  BRA     NZ,6B4
....................       address=LCD_LINE_TWO; 
06AE:  MOV.B   #40,W0L
06B0:  MOV.B   W0L,824
06B2:  BRA     6D2
....................    else if(y == 3) //Line three 
06B4:  MOV     822,W4
06B6:  LSR     W4,#8,W4
06B8:  CP.B    W4L,#3
06BA:  BRA     NZ,6C2
....................       address = LCD_LINE_THREE; 
06BC:  MOV.B   #14,W0L
06BE:  MOV.B   W0L,824
06C0:  BRA     6D2
....................    else if(y == 4) //Line Four 
06C2:  MOV     822,W4
06C4:  LSR     W4,#8,W4
06C6:  CP.B    W4L,#4
06C8:  BRA     NZ,6D0
....................       address = LCD_LINE_FOUR; 
06CA:  MOV.B   #54,W0L
06CC:  MOV.B   W0L,824
06CE:  BRA     6D2
....................    else 
....................       address=0; 
06D0:  CLR.B   824
....................  
....................    address+=x-1; 
06D2:  MOV     822,W4
06D4:  CLR.B   9
06D6:  SUB     W4,#1,W0
06D8:  ADD.B   824
....................    lcd_send_byte(0,0x80|address); 
06DA:  MOV.B   824,W0L
06DC:  CLR.B   1
06DE:  MOV.B   W0L,W5L
06E0:  IOR     #80,W5
06E2:  CLR.B   82A
06E4:  PUSH    82A
06E6:  MOV.B   W5L,[W15-#1]
06E8:  POP     82A
06EA:  CALL    5DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
06EE:  MOV     822,W4
06F0:  SUB.B   W4L,#1,W0L
06F2:  MOV.B   W0L,802
....................    g_LcdY = y - 1; 
06F4:  MOV     822,W4
06F6:  LSR     W4,#8,W4
06F8:  SUB.B   W4L,#1,W0L
06FA:  MOV.B   W0L,803
....................   #endif 
06FC:  MOV     [--W15],W5
06FE:  RETURN  
.................... } 
....................  
.................... void lcd_putc(char c) 
0700:  MOV     W5,[W15++]
.................... { 
....................    switch (c) 
0702:  MOV.B   81C,W0L
0704:  SE      W0,W0
0706:  XOR     #7,W0
0708:  BRA     Z,71C
070A:  XOR     #B,W0
070C:  BRA     Z,72A
070E:  XOR     #1,W0
0710:  BRA     Z,742
0712:  XOR     #7,W0
0714:  BRA     Z,756
0716:  XOR     #2,W0
0718:  BRA     Z,780
071A:  BRA     78C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
071C:  MOV.B   #1,W0L
071E:  MOV.B   W0L,822
0720:  MOV.B   #1,W0L
0722:  MOV.B   W0L,823
0724:  CALL    6A4
0728:  BRA     7A2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
072A:  CLR.B   82A
072C:  MOV.B   #1,W0L
072E:  MOV.B   W0L,82B
0730:  CALL    5DE
....................                      delay_ms(2); 
0734:  REPEAT  #3CFE
0736:  NOP     
0738:  REPEAT  #3FFF
073A:  NOP     
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
073C:  CLR.B   802
....................                      g_LcdY = 0; 
073E:  CLR.B   803
....................                     #endif 
....................                      break; 
0740:  BRA     7A2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
0742:  MOV     802,W4
0744:  LSR     W4,#8,W4
0746:  ADD     W4,#1,W5
0748:  MOV.B   #1,W0L
074A:  MOV.B   W0L,822
074C:  MOV.B   W5L,W0L
074E:  MOV.B   W0L,823
0750:  CALL    6A4
0754:  BRA     7A2
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
0756:  MOV.B   802,W0L
0758:  INC.B   0802
075A:  CP.B    W0L,#14
075C:  BRA     C,76C
....................          { 
....................             lcd_send_byte(1, ' '); 
075E:  MOV.B   #1,W0L
0760:  MOV.B   W0L,82A
0762:  MOV.B   #20,W0L
0764:  MOV.B   W0L,82B
0766:  CALL    5DE
076A:  BRA     756
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
076C:  MOV     802,W4
076E:  LSR     W4,#8,W4
0770:  ADD     W4,#2,W5
0772:  MOV.B   #1,W0L
0774:  MOV.B   W0L,822
0776:  MOV.B   W5L,W0L
0778:  MOV.B   W0L,823
077A:  CALL    6A4
....................          break; 
077E:  BRA     7A2
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0780:  CLR.B   82A
0782:  MOV.B   #10,W0L
0784:  MOV.B   W0L,82B
0786:  CALL    5DE
078A:  BRA     7A2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
078C:  MOV     802,W4
078E:  CP.B    W4L,#14
0790:  BRA     C,7A0
....................          { 
....................             lcd_send_byte(1, c); 
0792:  MOV.B   #1,W0L
0794:  MOV.B   W0L,82A
0796:  MOV.B   81C,W0L
0798:  MOV.B   W0L,82B
079A:  CALL    5DE
....................             g_LcdX++; 
079E:  INC.B   0802
....................          } 
....................          break; 
07A0:  BRA     7A2
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
07A2:  MOV     [--W15],W5
07A4:  RETURN  
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
*
0A40:  CP0.B   818
0A42:  BRA     Z,A50
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
0A44:  CLR.B   82A
0A46:  MOV.B   #F,W0L
0A48:  MOV.B   W0L,82B
0A4A:  CALL    5DE
....................    } 
0A4E:  BRA     A5A
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
0A50:  CLR.B   82A
0A52:  MOV.B   #C,W0L
0A54:  MOV.B   W0L,82B
0A56:  CALL    5DE
....................    } 
0A5A:  RETURN  
.................... } 
....................  
.................... #endif 
....................  
.................... #include "kbd_mod_123A_int.c" 
.................... //Keypad Driver 
....................  
.................... #word kbd = getenv("SFR:PORTB") 
....................  
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                         {'4','5','6','B'}, 
....................                         {'7','8','9','C'}, 
....................                         {'*','0','#','D'}}; 
....................                          
.................... void kbd_init() 
*
09CE:  MOV     W5,[W15++]
.................... { 
....................    set_tris_b(0x0F00 | (0x00FF & get_tris_b())); //Only use B8 to B15 
09D0:  MOV     2C8,W0
09D2:  AND     #FF,W0
09D4:  MOV     W0,W4
09D6:  MOV     #F00,W0
09D8:  IOR      W0,  W4,W5
09DA:  MOV     W5,2C8
....................    set_pullup(true, PIN_B8);   // input pins 
09DC:  BSET.B  70.6
....................    set_pullup(true, PIN_B9); 
09DE:  BSET.B  70.5
....................    set_pullup(true, PIN_B10); 
09E0:  BSET.B  70.0
....................    set_pullup(true, PIN_B11); 
09E2:  BSET.B  6F.7
....................    kbd = (0x0000 | (0x00FF & kbd));   // set output columns to zero 
09E4:  MOV     2CA,W0
09E6:  AND     #FF,W0
09E8:  MOV     W0,2CA
09EA:  MOV     [--W15],W5
09EC:  RETURN  
.................... } 
....................  
.................... char kbd_getc() { 
*
03FC:  MOV     W5,[W15++]
03FE:  BCLR.B  832.1
0400:  CLR.B   834
....................  
....................    int1 kbd_down; 
....................    int1 idd = 0; 
....................    char last_key; 
....................    unsigned int8 col = 0; 
....................     
....................    unsigned int8 kchar; 
....................    unsigned int8 row; 
....................    kchar = '\0'; 
0402:  CLR.B   835
....................     
....................    set_tris_b(0x0F00 | (0x00FF & get_tris_b())); 
0404:  MOV     2C8,W0
0406:  AND     #FF,W0
0408:  MOV     W0,W4
040A:  MOV     #F00,W0
040C:  IOR      W0,  W4,W5
040E:  MOV     W5,2C8
....................     
....................    while(idd == 0) 
0410:  BTSC.B  832.1
0412:  BRA     4E6
....................    { 
....................       //delay_us(100); // This delay adds de-bounce 
....................       if(col == 0)    // 1st time access, col = 0 by default 
0414:  CP0.B   834
0416:  BRA     NZ,426
....................       { 
....................          kbd = (0xEF00 | (0x00FF & kbd));     // set 1st col low. 
0418:  MOV     2CA,W0
041A:  AND     #FF,W0
041C:  MOV     W0,W4
041E:  MOV     #EF00,W0
0420:  IOR      W0,  W4,W0
0422:  MOV     W0,2CA
....................       } 
0424:  BRA     460
....................       else if(col == 1) 
0426:  MOV     834,W4
0428:  CP.B    W4L,#1
042A:  BRA     NZ,43A
....................       { 
....................          kbd = (0xDF00 | (0x00FF & kbd));      // set 2nd col, low. 
042C:  MOV     2CA,W0
042E:  AND     #FF,W0
0430:  MOV     W0,W4
0432:  MOV     #DF00,W0
0434:  IOR      W0,  W4,W0
0436:  MOV     W0,2CA
....................       } 
0438:  BRA     460
....................       else if (col == 2) 
043A:  MOV     834,W4
043C:  CP.B    W4L,#2
043E:  BRA     NZ,44E
....................       { 
....................          kbd = (0xBF00 | (0x00FF & kbd));      // set 3rd col, low 
0440:  MOV     2CA,W0
0442:  AND     #FF,W0
0444:  MOV     W0,W4
0446:  MOV     #BF00,W0
0448:  IOR      W0,  W4,W0
044A:  MOV     W0,2CA
....................       } 
044C:  BRA     460
....................       else if (col == 3) 
044E:  MOV     834,W4
0450:  CP.B    W4L,#3
0452:  BRA     NZ,460
....................       { 
....................          kbd = (0x7F00 | (0x00FF & kbd));      // set 4th column to low 
0454:  MOV     2CA,W0
0456:  AND     #FF,W0
0458:  MOV     W0,W4
045A:  MOV     #7F00,W0
045C:  IOR      W0,  W4,W0
045E:  MOV     W0,2CA
....................       } 
....................       if(kbd_down) 
0460:  BTSS.B  832.0
0462:  BRA     47C
....................       { 
....................          if((kbd & 0x0F00) == 0x0F00)   // pushed key released  
0464:  MOV     #F00,W0
0466:  AND     2CA,W0
0468:  MOV     W0,W5
046A:  MOV     #F00,W4
046C:  CP      W4,W5
046E:  BRA     NZ,47A
....................          { 
....................            kbd_down = FALSE; 
0470:  BCLR.B  832.0
....................            kchar=last_key;      // detected key 
0472:  MOV.B   833,W0L
0474:  MOV.B   W0L,835
....................            last_key='\0'; 
0476:  CLR.B   833
....................            idd = 1; 
0478:  BSET.B  832.1
....................          } 
....................       } 
047A:  BRA     4E4
....................       else 
....................       { 
....................           if((kbd & 0x0F00) != 0x0F00) // key pressed, one row is low 
047C:  MOV     #F00,W0
047E:  AND     2CA,W0
0480:  MOV     W0,W5
0482:  MOV     #F00,W4
0484:  CP      W4,W5
0486:  BRA     Z,4DA
....................           { 
....................              if((kbd & 0x0800) == 0) 
0488:  MOV     #800,W0
048A:  AND     2CA,W0
048C:  MOV     W0,W5
048E:  CP0     W5
0490:  BRA     NZ,496
....................                row = 0; 
0492:  CLR.B   836
0494:  BRA     4C0
....................              else if((kbd & 0x0400) == 0) 
0496:  MOV     #400,W0
0498:  AND     2CA,W0
049A:  MOV     W0,W5
049C:  CP0     W5
049E:  BRA     NZ,4A6
....................                row = 1; 
04A0:  MOV.B   #1,W0L
04A2:  MOV.B   W0L,836
04A4:  BRA     4C0
....................              else if((kbd & 0x0200) == 0) 
04A6:  MOV     2CA,W5
04A8:  AND     #200,W5
04AA:  CP0     W5
04AC:  BRA     NZ,4B4
....................                row = 2; 
04AE:  MOV.B   #2,W0L
04B0:  MOV.B   W0L,836
04B2:  BRA     4C0
....................              else if((kbd & 0x0100) == 0) 
04B4:  MOV     2CA,W5
04B6:  AND     #100,W5
04B8:  CP0     W5
04BA:  BRA     NZ,4C0
....................                row = 3; 
04BC:  MOV.B   #3,W0L
04BE:  MOV.B   W0L,836
....................              last_key = KEYS[3 - row][col]; 
04C0:  MOV     836,W4
04C2:  CLR.B   9
04C4:  MOV     #3,W3
04C6:  SUB     W3,W4,W5
04C8:  SL      W5,#2,W5
04CA:  MOV     834,W4
04CC:  CLR.B   9
04CE:  ADD     W5,W4,W0
04D0:  CALL    200
04D4:  MOV.B   W0L,833
....................              kbd_down = TRUE; 
04D6:  BSET.B  832.0
....................           } 
04D8:  BRA     4E4
....................           else 
....................           { 
....................              ++col; 
04DA:  INC.B   0834
....................              if(col == 4) 
04DC:  MOV     834,W4
04DE:  CP.B    W4L,#4
04E0:  BRA     NZ,4E4
....................                col=0; 
04E2:  CLR.B   834
....................           } 
....................        } 
04E4:  BRA     410
....................    } 
....................   return(kchar); 
04E6:  MOV.B   835,W0L
04E8:  MOV     [--W15],W5
04EA:  RETURN  
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... //Flags for Both interrupts 
.................... int1 serial_flag = 0; 
.................... int1 keypad_flag = 0; 
.................... char key; 
.................... char UARTKey; 
.................... int32 frequency = 0; 
....................  
.................... //UART Interrupt 
.................... #INT_RDA2 
.................... void isr_uart() 
*
03D4:  PUSH    42
03D6:  PUSH    36
03D8:  PUSH    32
03DA:  MOV     W0,[W15++]
03DC:  MOV     #2,W0
03DE:  REPEAT  #C
03E0:  MOV     [W0++],[W15++]
.................... { 
....................    UARTKey = getc(); 
03E2:  CALL    3B2
03E6:  MOV.B   W0L,806
....................    serial_flag = 1; 
03E8:  BSET.B  804.0
.................... } 
....................  
03EA:  BCLR.B  87.6
03EC:  MOV     #1A,W0
03EE:  REPEAT  #C
03F0:  MOV     [--W15],[W0--]
03F2:  MOV     [--W15],W0
03F4:  POP     32
03F6:  POP     36
03F8:  POP     42
03FA:  RETFIE  
.................... #INT_EXT0 
.................... void ist_ext() 
*
04EC:  PUSH    42
04EE:  PUSH    36
04F0:  PUSH    32
04F2:  MOV     W0,[W15++]
04F4:  MOV     #2,W0
04F6:  REPEAT  #C
04F8:  MOV     [W0++],[W15++]
.................... { 
....................    key = kbd_getc(); 
04FA:  CALL    3FC
04FE:  MOV.B   W0L,805
....................    keypad_flag = 1; 
0500:  BSET.B  804.1
0502:  BCLR.B  84.0
0504:  MOV     #1A,W0
0506:  REPEAT  #C
0508:  MOV     [--W15],[W0--]
050A:  MOV     [--W15],W0
050C:  POP     32
050E:  POP     36
0510:  POP     42
0512:  RETFIE  
.................... } 
....................  
.................... void lcd_display(char c) 
.................... { 
....................    disable_interrupts(INT_EXT0); 
....................    set_pullup(false); 
....................    lcd_putc(c); 
....................    kbd_init(); 
....................    clear_interrupt(INT_EXT0); 
....................    enable_interrupts(INT_EXT0); 
....................   
.................... } 
....................  
.................... void lcd_clear() 
.................... { 
....................    printf(lcd_putc, "\f"); //Clear Screen 
*
1316:  MOV.B   #C,W0L
1318:  MOV.B   W0L,81C
131A:  CALL    700
131E:  RETURN  
.................... } 
....................  
....................  
.................... int state = 1;  
.................... int selected = 1; 
....................  
.................... CONST int BOTTOM = 4; 
.................... CONST int TOP = 1; 
.................... /* 
.................... STATE GUIDE: 
....................  
....................    0 - MENU 
.................... */ 
....................  
.................... void main() 
*
13B6:  MOV     #F80,W15
13B8:  MOV     #FFF,W0
13BA:  MOV     W0,20
13BC:  NOP     
13BE:  BSET.B  81.7
13C0:  CLR     744
13C2:  CLR     744
13C4:  DISI    #E
13C6:  MOV     #101,W0
13C8:  MOV     #743,W1
13CA:  MOV     #78,W2
13CC:  MOV     #9A,W3
13CE:  MOV.B   W2L,[W1]
13D0:  MOV.B   W3L,[W1]
13D2:  MOV.B   W0L,743
13D4:  LSR     W0,#8,W0
13D6:  MOV     #742,W1
13D8:  MOV     #46,W2
13DA:  MOV     #57,W3
13DC:  MOV.B   W2L,[W1]
13DE:  MOV.B   W3L,[W1]
13E0:  MOV.B   W0L,[W1]
13E2:  CLR     800
13E4:  MOV     #8000,W4
13E6:  MOV     W4,230
13E8:  MOV     #400,W4
13EA:  MOV     W4,232
13EC:  BSET.B  230.3
13EE:  MOV     #22,W4
13F0:  MOV     W4,238
13F2:  BCLR.B  804.0
13F4:  BCLR.B  804.1
13F6:  CLR     808
13F8:  CLR     80A
13FA:  MOV     #1,W4
13FC:  MOV     W4,80C
13FE:  MOV     #1,W4
1400:  MOV     W4,80E
1402:  CLR     810
1404:  CLR     4E0
1406:  CLR     4E2
.................... { 
.................... //----------------------DECLARATIONS AND INITIATIONS---------------------------// 
....................    systemInit(); 
1408:  CALL    9EE
....................  
....................    printf("\n\rHello...\n\r"); 
140C:  MOV     #0,W1
140E:  MOV     W1,W0
1410:  CLR.B   1
1412:  CALL    21C
1416:  INC     W1,W1
1418:  BTSS.B  233.0
141A:  BRA     1418
141C:  MOV     W0,234
141E:  MOV     #B,W0
1420:  CPSGT   W1,W0
1422:  BRA     140E
....................     
....................    serial_flag = 0; 
1424:  BCLR.B  804.0
....................    keypad_flag = 0; 
1426:  BCLR.B  804.1
....................     
....................    unsigned int8 xPosition = 1; 
....................     
....................    //Pressed indicates if a number has been pressed  
....................    boolean pressed = 0; 
1428:  MOV.B   #1,W0L
142A:  MOV.B   W0L,812
142C:  BCLR.B  813.0
....................    //printf(lcd_putc , "Hi\nHi\nHi\n"); 
.................... //----------------------INFINITE LOOP-----------------------------------// 
....................    while(1) 
....................    { 
....................     
....................      if(keypad_flag) 
142E:  BTSS.B  804.1
1430:  BRA     161E
....................      { 
....................          disableKeypad(); 
1432:  CALL    A38
....................          //lcd_putc(key); 
....................          switch(state){ 
1436:  MOV     80C,W0
1438:  XOR     #1,W0
143A:  BRA     Z,144E
143C:  XOR     #3,W0
143E:  BRA     Z,149E
1440:  XOR     #1,W0
1442:  BRA     Z,157E
1444:  XOR     #7,W0
1446:  BRA     Z,15FC
1448:  XOR     #1,W0
144A:  BRA     Z,1614
144C:  BRA     1616
....................             case 1: //Main Menu State 
....................                if(key == 'A') //UP KEY 
144E:  MOV     804,W4
1450:  LSR     W4,#8,W4
1452:  XOR.B   #41,W4L
1454:  BRA     NZ,1468
....................                { 
....................                   if(selected != TOP) 
1456:  MOV     80E,W4
1458:  CP      W4,#1
145A:  BRA     Z,145E
....................                      selected--; 
145C:  DEC     080E
....................                   menuRefresh(selected); 
145E:  PUSH    80E
1460:  POP     818
1462:  CALL    7A6
....................                    
....................                } 
1466:  BRA     149C
....................                else if(key == 'B') //Down KEY 
1468:  MOV     804,W4
146A:  LSR     W4,#8,W4
146C:  XOR.B   #42,W4L
146E:  BRA     NZ,1482
....................                { 
....................                   if(selected != BOTTOM) 
1470:  MOV     80E,W4
1472:  CP      W4,#4
1474:  BRA     Z,1478
....................                      selected++; 
1476:  INC     080E
....................                   menuRefresh(selected); 
1478:  PUSH    80E
147A:  POP     818
147C:  CALL    7A6
....................                } 
1480:  BRA     149C
....................                else if(key == '#') //Enter Key 
1482:  MOV     804,W4
1484:  LSR     W4,#8,W4
1486:  XOR.B   #23,W4L
1488:  BRA     NZ,149C
....................                { 
....................                   state = state + selected; 
148A:  MOV     80C,W0
148C:  ADD     80E,W0
148E:  MOV     W0,80C
....................                   enterState(state); 
1490:  PUSH    80C
1492:  POP     814
1494:  CALL    1000
....................                   selected = 1; 
1498:  MOV     #1,W4
149A:  MOV     W4,80E
....................                } 
....................             break; 
149C:  BRA     1616
....................             case 2: //Single Sample State 
....................                
....................                if(key == 'D') //Exit key pressed 
149E:  MOV     804,W4
14A0:  LSR     W4,#8,W4
14A2:  XOR.B   #44,W4L
14A4:  BRA     NZ,14BA
....................                { 
....................                   state = 1; 
14A6:  MOV     #1,W4
14A8:  MOV     W4,80C
....................                   enterState(state); 
14AA:  PUSH    80C
14AC:  POP     814
14AE:  CALL    1000
....................                   frequency = 0; 
14B2:  CLR     808
14B4:  CLR     80A
....................                   break; 
14B6:  BRA     1616
....................                } 
14B8:  BRA     1578
....................                else if((key >= '0') && (key <= '9')) 
14BA:  MOV     804,W4
14BC:  LSR     W4,#8,W4
14BE:  MOV     #30,W3
14C0:  CP.B    W3L,W4L
14C2:  BRA     GT,151A
14C4:  MOV     804,W4
14C6:  LSR     W4,#8,W4
14C8:  MOV     #39,W3
14CA:  CP.B    W3L,W4L
14CC:  BRA     LT,151A
....................                { 
....................                   frequency = frequency * 10 + key - 48; 
14CE:  MOV     808,W0
14D0:  MOV     80A,W1
14D2:  MOV     #A,W2
14D4:  MOV     #0,W3
14D6:  CALL    103E
14DA:  MOV     W0,W5
14DC:  MOV     W1,W6
14DE:  MOV.B   805,W0L
14E0:  SE      W0,W0
14E2:  CLR     W1
14E4:  BTSC    W0.F
14E6:  SETM    W1
14E8:  ADD     W0,W5,W5
14EA:  ADDC    W1,W6,W6
14EC:  MOV     #30,W4
14EE:  SUB     W5,W4,W0
14F0:  MOV     W0,808
14F2:  SUBB    W6,#0,W0
14F4:  MOV     W0,80A
....................                   if(frequency > 200000) 
14F6:  MOV     80A,W4
14F8:  CP      W4,#3
14FA:  BRA     LT,1518
14FC:  BRA     GT,1506
14FE:  MOV     808,W4
1500:  MOV     #D40,W3
1502:  CP      W3,W4
1504:  BRA     C,1518
....................                   { 
....................                      frequency = frequency / 10; 
1506:  BCLR.B  43.0
1508:  MOV     808,W0
150A:  MOV     80A,W1
150C:  MOV     #A,W2
150E:  MOV     #0,W3
1510:  CALL    1080
1514:  MOV     W0,808
1516:  MOV     W1,80A
....................                   } 
....................                } 
1518:  BRA     1578
....................                else if(key == '*') 
151A:  MOV     804,W4
151C:  LSR     W4,#8,W4
151E:  XOR.B   #2A,W4L
1520:  BRA     NZ,1536
....................                { 
....................                   frequency = frequency / 10; 
1522:  BCLR.B  43.0
1524:  MOV     808,W0
1526:  MOV     80A,W1
1528:  MOV     #A,W2
152A:  MOV     #0,W3
152C:  CALL    1080
1530:  MOV     W0,808
1532:  MOV     W1,80A
....................                } 
1534:  BRA     1578
....................                else if(key == '#') 
1536:  MOV     804,W4
1538:  LSR     W4,#8,W4
153A:  XOR.B   #23,W4L
153C:  BRA     NZ,1578
....................                { 
....................                    
....................                   if(frequency > 0) 
153E:  MOV     80A,W4
1540:  CP      W4,#0
1542:  BRA     LT,1578
1544:  BRA     GT,154C
1546:  MOV     808,W4
1548:  CP      W4,#0
154A:  BRA     LEU,1578
....................                   { 
....................                      printf("F"); //Send Frequency 
154C:  BTSS.B  233.0
154E:  BRA     154C
1550:  MOV     #46,W4
1552:  MOV     W4,234
....................                      printf("%i", frequency); //Send to GUI 
1554:  MOV     808,W0
1556:  MOV     80A,W1
1558:  MOV     #0,W4
155A:  CALL    10FE
....................                      printf("\n"); //Print newline 
155E:  BTSS.B  233.0
1560:  BRA     155E
1562:  MOV     #A,W4
1564:  MOV     W4,234
....................                       
....................  
....................                      state = 1; 
1566:  MOV     #1,W4
1568:  MOV     W4,80C
....................                      enterState(state); 
156A:  PUSH    80C
156C:  POP     814
156E:  CALL    1000
....................                      frequency = 0; 
1572:  CLR     808
1574:  CLR     80A
....................                      break; 
1576:  BRA     1616
....................                   } 
....................                    
....................                } 
....................                 
....................                readFrequency(); 
1578:  CALL    BD0
....................                 
....................             break; 
157C:  BRA     1616
....................             case 3: //Sweep State 
....................                 
....................                if(key == 'A') //UP KEY 
157E:  MOV     804,W4
1580:  LSR     W4,#8,W4
1582:  XOR.B   #41,W4L
1584:  BRA     NZ,1598
....................                { 
....................                   if(selected != TOP) 
1586:  MOV     80E,W4
1588:  CP      W4,#1
158A:  BRA     Z,158E
....................                      selected--; 
158C:  DEC     080E
....................                   sweepRefresh(selected); 
158E:  PUSH    80E
1590:  POP     818
1592:  CALL    C08
....................                    
....................                } 
1596:  BRA     15FA
....................                else if(key == 'B') //Down KEY 
1598:  MOV     804,W4
159A:  LSR     W4,#8,W4
159C:  XOR.B   #42,W4L
159E:  BRA     NZ,15B2
....................                { 
....................                   if(selected != 7) //Use 7 for max  
15A0:  MOV     80E,W4
15A2:  CP      W4,#7
15A4:  BRA     Z,15A8
....................                      selected++; 
15A6:  INC     080E
....................                   sweepRefresh(selected); 
15A8:  PUSH    80E
15AA:  POP     818
15AC:  CALL    C08
....................                } 
15B0:  BRA     15FA
....................                else if(key == '#') //Enter Key We send the sweep here 
15B2:  MOV     804,W4
15B4:  LSR     W4,#8,W4
15B6:  XOR.B   #23,W4L
15B8:  BRA     NZ,15E0
....................                { 
....................                   printf("S"); //Print two for sweep 
15BA:  BTSS.B  233.0
15BC:  BRA     15BA
15BE:  MOV     #53,W4
15C0:  MOV     W4,234
....................                   printf("%i", selected); //Send type of sweep 1- 7 
15C2:  MOV     80E,W0
15C4:  MOV     #0,W4
15C6:  CALL    1216
....................                   waitForResponse(); 
15CA:  CALL    132A
....................                   //Return to menu 
....................                   state = 1; 
15CE:  MOV     #1,W4
15D0:  MOV     W4,80C
....................                   enterState(state); 
15D2:  PUSH    80C
15D4:  POP     814
15D6:  CALL    1000
....................                   selected = 1; 
15DA:  MOV     #1,W4
15DC:  MOV     W4,80E
....................                    
....................                } 
15DE:  BRA     15FA
....................                else if(key == 'D') //Exit key pressed 
15E0:  MOV     804,W4
15E2:  LSR     W4,#8,W4
15E4:  XOR.B   #44,W4L
15E6:  BRA     NZ,15FA
....................                { 
....................                   state = 1; 
15E8:  MOV     #1,W4
15EA:  MOV     W4,80C
....................                   selected = 1; 
15EC:  MOV     #1,W4
15EE:  MOV     W4,80E
....................                   enterState(state); 
15F0:  PUSH    80C
15F2:  POP     814
15F4:  CALL    1000
....................                   break; 
15F8:  BRA     1616
....................                } 
....................                 
....................             break; 
15FA:  BRA     1616
....................             case 4: //Clear Screen 
....................                   screenClearedDisplay(); 
15FC:  CALL    138C
....................                   state = 1; 
1600:  MOV     #1,W4
1602:  MOV     W4,80C
....................                   selected = 1; 
1604:  MOV     #1,W4
1606:  MOV     W4,80E
....................                   enterState(state); 
1608:  PUSH    80C
160A:  POP     814
160C:  CALL    1000
....................                   break; 
1610:  BRA     1616
....................             break; 
1612:  BRA     1616
....................             case 5: //Full Cycle 
....................                 
....................             break; 
1614:  BRA     1616
....................           
....................          } 
....................           
....................          enableKeypad(); 
1616:  CALL    1320
....................          keypad_flag = 0; 
161A:  BCLR.B  804.1
....................      } 
161C:  BRA     1624
....................      else if(serial_flag) //If Serial Data is Received 
161E:  BTSS.B  804.0
1620:  BRA     1624
....................      { 
....................          serial_flag = 0; 
1622:  BCLR.B  804.0
....................      } 
1624:  BRA     142E
....................  
....................    } 
.................... } 
.................... //Clear Line 
1626:  PWRSAV  #0
.................... void clearLine(void) 
.................... { 
....................    disable_interrupts(INT_EXT0); 
....................    set_pullup(false); 
....................    //Precondition: The cursor is set to the line that you want to clear 
....................    //Postcondition: The line is clear but cursor is at x = 17 of whatever line was cleared 
....................    //MUST MOVE CURSOR 
....................    for(int i = 0; i <16;i++) 
....................    { 
....................       lcd_putc(' '); 
....................    } 
....................     
....................    //lcd_gotoxy(1,1); 
....................    kbd_init(); 
....................    clear_interrupt(INT_EXT0); 
....................    enable_interrupts(INT_EXT0); 
.................... } 
....................  
.................... //Cool Function 
.................... //Shifts the top line over 
.................... void lcdShift(void) 
.................... { 
....................    disable_interrupts(INT_EXT0); 
....................    set_pullup(false); 
....................    //char temp1; 
....................    char temp2; 
....................     
....................    //int cursor = 1; 
....................     
....................    lcd_gotoxy(1,1); 
....................     
....................    for(int i = 1; i < 16; i++) 
....................    { 
....................       temp2 = lcd_getc(i+1,1); 
....................        
....................       lcd_gotoxy(i,1); 
....................        
....................       lcd_putc(temp2); 
....................       //lcd_gotoxy(i,1); 
....................        
....................    } 
....................     
....................    lcd_gotoxy(16,1); 
....................    lcd_putc(' '); 
....................    lcd_gotoxy(16,1); 
....................     
....................    kbd_init(); 
....................    clear_interrupt(INT_EXT0); 
....................    enable_interrupts(INT_EXT0); 
....................     
.................... } 
....................  
.................... void disableKeypad() 
.................... { 
....................    disable_interrupts(INT_EXT0); 
*
0A38:  BCLR.B  94.0
....................    set_pullup(false); 
0A3A:  CLR     6E
0A3C:  CLR     70
0A3E:  RETURN  
.................... } 
....................  
.................... void enableKeypad() 
.................... { 
....................    kbd_init(); 
*
1320:  CALL    9CE
....................    clear_interrupt(INT_EXT0); 
1324:  BCLR.B  84.0
....................    enable_interrupts(INT_EXT0); 
1326:  BSET.B  94.0
1328:  RETURN  
.................... } 
....................  
.................... void enableInterrupts() 
.................... { 
....................  
.................... } 
.................... void systemInit(void) 
.................... { 
....................    lcd_init(); 
*
09EE:  CALL    62A
....................     
....................    //lcd_cursor_on(TRUE); 
....................     
....................    printf(lcd_putc, "Powering ON"); 
09F2:  MOV     #0,W1
09F4:  MOV     W1,W0
09F6:  CLR.B   1
09F8:  CALL    236
09FC:  INC     W1,W1
09FE:  MOV     W1,[W15++]
0A00:  MOV.B   W0L,81C
0A02:  CALL    700
0A06:  MOV     [--W15],W1
0A08:  MOV     #A,W0
0A0A:  CPSGT   W1,W0
0A0C:  BRA     9F4
....................    delay_ms(500); 
0A0E:  MOV     #1F4,W0
0A10:  CALL    514
....................    printf(lcd_putc, "\f"); 
0A14:  MOV.B   #C,W0L
0A16:  MOV.B   W0L,81C
0A18:  CALL    700
....................     
....................    menuRefresh(selected); 
0A1C:  PUSH    80E
0A1E:  POP     818
0A20:  CALL    7A6
....................     
....................    kbd_init(); 
0A24:  CALL    9CE
....................    ext_int_edge(L_TO_H); 
0A28:  BCLR.B  82.0
....................    clear_interrupt(INT_EXT0); 
0A2A:  BCLR.B  84.0
....................     
....................    enable_interrupts(INT_EXT0); 
0A2C:  BSET.B  94.0
....................    enable_interrupts(INT_RDA2); 
0A2E:  BSET.B  97.6
....................    enable_interrupts(INTR_GLOBAL); 
0A30:  BCLR.B  81.7
0A32:  CLR     42
0A34:  BSET.B  81.7
0A36:  RETURN  
.................... } 
....................  
.................... void menuRefresh(int selected) 
.................... { 
....................    printf(lcd_putc, "\f"); //Clear Screen 
*
07A6:  MOV.B   #C,W0L
07A8:  MOV.B   W0L,81C
07AA:  CALL    700
....................     
....................    if(selected == 1) 
07AE:  MOV     818,W4
07B0:  CP      W4,#1
07B2:  BRA     NZ,836
....................    { 
....................       printf(lcd_putc, "> "); 
07B4:  MOV.B   #3E,W0L
07B6:  MOV.B   W0L,81C
07B8:  CALL    700
07BC:  MOV.B   #20,W0L
07BE:  MOV.B   W0L,81C
07C0:  CALL    700
....................       printf(lcd_putc, "Single Sample\n"); 
07C4:  MOV     #0,W1
07C6:  MOV     W1,W0
07C8:  CLR.B   1
07CA:  CALL    24E
07CE:  INC     W1,W1
07D0:  MOV     W1,[W15++]
07D2:  MOV.B   W0L,81C
07D4:  CALL    700
07D8:  MOV     [--W15],W1
07DA:  MOV     #D,W0
07DC:  CPSGT   W1,W0
07DE:  BRA     7C6
....................       printf(lcd_putc, "Sweep\n"); 
07E0:  MOV     #0,W1
07E2:  MOV     W1,W0
07E4:  CLR.B   1
07E6:  CALL    26A
07EA:  INC     W1,W1
07EC:  MOV     W1,[W15++]
07EE:  MOV.B   W0L,81C
07F0:  CALL    700
07F4:  MOV     [--W15],W1
07F6:  MOV     #5,W0
07F8:  CPSGT   W1,W0
07FA:  BRA     7E2
....................       printf(lcd_putc, "Full Sweep\n"); 
07FC:  MOV     #0,W1
07FE:  MOV     W1,W0
0800:  CLR.B   1
0802:  CALL    27E
0806:  INC     W1,W1
0808:  MOV     W1,[W15++]
080A:  MOV.B   W0L,81C
080C:  CALL    700
0810:  MOV     [--W15],W1
0812:  MOV     #A,W0
0814:  CPSGT   W1,W0
0816:  BRA     7FE
....................       printf(lcd_putc, "Clear\n"); 
0818:  MOV     #0,W1
081A:  MOV     W1,W0
081C:  CLR.B   1
081E:  CALL    296
0822:  INC     W1,W1
0824:  MOV     W1,[W15++]
0826:  MOV.B   W0L,81C
0828:  CALL    700
082C:  MOV     [--W15],W1
082E:  MOV     #5,W0
0830:  CPSGT   W1,W0
0832:  BRA     81A
....................    } 
0834:  BRA     9CC
....................    else if(selected == 2) 
0836:  MOV     818,W4
0838:  CP      W4,#2
083A:  BRA     NZ,8BE
....................    { 
....................       printf(lcd_putc, "Single Sample\n"); 
083C:  MOV     #0,W1
083E:  MOV     W1,W0
0840:  CLR.B   1
0842:  CALL    24E
0846:  INC     W1,W1
0848:  MOV     W1,[W15++]
084A:  MOV.B   W0L,81C
084C:  CALL    700
0850:  MOV     [--W15],W1
0852:  MOV     #D,W0
0854:  CPSGT   W1,W0
0856:  BRA     83E
....................       printf(lcd_putc, "> "); 
0858:  MOV.B   #3E,W0L
085A:  MOV.B   W0L,81C
085C:  CALL    700
0860:  MOV.B   #20,W0L
0862:  MOV.B   W0L,81C
0864:  CALL    700
....................       printf(lcd_putc, "Sweep\n"); 
0868:  MOV     #0,W1
086A:  MOV     W1,W0
086C:  CLR.B   1
086E:  CALL    26A
0872:  INC     W1,W1
0874:  MOV     W1,[W15++]
0876:  MOV.B   W0L,81C
0878:  CALL    700
087C:  MOV     [--W15],W1
087E:  MOV     #5,W0
0880:  CPSGT   W1,W0
0882:  BRA     86A
....................       printf(lcd_putc, "Full Sweep\n"); 
0884:  MOV     #0,W1
0886:  MOV     W1,W0
0888:  CLR.B   1
088A:  CALL    27E
088E:  INC     W1,W1
0890:  MOV     W1,[W15++]
0892:  MOV.B   W0L,81C
0894:  CALL    700
0898:  MOV     [--W15],W1
089A:  MOV     #A,W0
089C:  CPSGT   W1,W0
089E:  BRA     886
....................       printf(lcd_putc, "Clear\n"); 
08A0:  MOV     #0,W1
08A2:  MOV     W1,W0
08A4:  CLR.B   1
08A6:  CALL    296
08AA:  INC     W1,W1
08AC:  MOV     W1,[W15++]
08AE:  MOV.B   W0L,81C
08B0:  CALL    700
08B4:  MOV     [--W15],W1
08B6:  MOV     #5,W0
08B8:  CPSGT   W1,W0
08BA:  BRA     8A2
....................    } 
08BC:  BRA     9CC
....................    else if(selected == 3) 
08BE:  MOV     818,W4
08C0:  CP      W4,#3
08C2:  BRA     NZ,946
....................    { 
....................       printf(lcd_putc, "Single Sample\n"); 
08C4:  MOV     #0,W1
08C6:  MOV     W1,W0
08C8:  CLR.B   1
08CA:  CALL    24E
08CE:  INC     W1,W1
08D0:  MOV     W1,[W15++]
08D2:  MOV.B   W0L,81C
08D4:  CALL    700
08D8:  MOV     [--W15],W1
08DA:  MOV     #D,W0
08DC:  CPSGT   W1,W0
08DE:  BRA     8C6
....................       printf(lcd_putc, "Sweep\n"); 
08E0:  MOV     #0,W1
08E2:  MOV     W1,W0
08E4:  CLR.B   1
08E6:  CALL    26A
08EA:  INC     W1,W1
08EC:  MOV     W1,[W15++]
08EE:  MOV.B   W0L,81C
08F0:  CALL    700
08F4:  MOV     [--W15],W1
08F6:  MOV     #5,W0
08F8:  CPSGT   W1,W0
08FA:  BRA     8E2
....................       printf(lcd_putc, "> "); 
08FC:  MOV.B   #3E,W0L
08FE:  MOV.B   W0L,81C
0900:  CALL    700
0904:  MOV.B   #20,W0L
0906:  MOV.B   W0L,81C
0908:  CALL    700
....................       printf(lcd_putc, "Full Sweep\n"); 
090C:  MOV     #0,W1
090E:  MOV     W1,W0
0910:  CLR.B   1
0912:  CALL    27E
0916:  INC     W1,W1
0918:  MOV     W1,[W15++]
091A:  MOV.B   W0L,81C
091C:  CALL    700
0920:  MOV     [--W15],W1
0922:  MOV     #A,W0
0924:  CPSGT   W1,W0
0926:  BRA     90E
....................       printf(lcd_putc, "Clear\n"); 
0928:  MOV     #0,W1
092A:  MOV     W1,W0
092C:  CLR.B   1
092E:  CALL    296
0932:  INC     W1,W1
0934:  MOV     W1,[W15++]
0936:  MOV.B   W0L,81C
0938:  CALL    700
093C:  MOV     [--W15],W1
093E:  MOV     #5,W0
0940:  CPSGT   W1,W0
0942:  BRA     92A
....................    } 
0944:  BRA     9CC
....................    else if(selected == 4) 
0946:  MOV     818,W4
0948:  CP      W4,#4
094A:  BRA     NZ,9CC
....................    { 
....................       printf(lcd_putc, "Single Sample\n"); 
094C:  MOV     #0,W1
094E:  MOV     W1,W0
0950:  CLR.B   1
0952:  CALL    24E
0956:  INC     W1,W1
0958:  MOV     W1,[W15++]
095A:  MOV.B   W0L,81C
095C:  CALL    700
0960:  MOV     [--W15],W1
0962:  MOV     #D,W0
0964:  CPSGT   W1,W0
0966:  BRA     94E
....................       printf(lcd_putc, "Sweep\n"); 
0968:  MOV     #0,W1
096A:  MOV     W1,W0
096C:  CLR.B   1
096E:  CALL    26A
0972:  INC     W1,W1
0974:  MOV     W1,[W15++]
0976:  MOV.B   W0L,81C
0978:  CALL    700
097C:  MOV     [--W15],W1
097E:  MOV     #5,W0
0980:  CPSGT   W1,W0
0982:  BRA     96A
....................       printf(lcd_putc, "Full Sweep\n"); 
0984:  MOV     #0,W1
0986:  MOV     W1,W0
0988:  CLR.B   1
098A:  CALL    27E
098E:  INC     W1,W1
0990:  MOV     W1,[W15++]
0992:  MOV.B   W0L,81C
0994:  CALL    700
0998:  MOV     [--W15],W1
099A:  MOV     #A,W0
099C:  CPSGT   W1,W0
099E:  BRA     986
....................       printf(lcd_putc, "> "); 
09A0:  MOV.B   #3E,W0L
09A2:  MOV.B   W0L,81C
09A4:  CALL    700
09A8:  MOV.B   #20,W0L
09AA:  MOV.B   W0L,81C
09AC:  CALL    700
....................       printf(lcd_putc, "Clear\n"); 
09B0:  MOV     #0,W1
09B2:  MOV     W1,W0
09B4:  CLR.B   1
09B6:  CALL    296
09BA:  INC     W1,W1
09BC:  MOV     W1,[W15++]
09BE:  MOV.B   W0L,81C
09C0:  CALL    700
09C4:  MOV     [--W15],W1
09C6:  MOV     #5,W0
09C8:  CPSGT   W1,W0
09CA:  BRA     9B2
....................    } 
09CC:  RETURN  
....................  
.................... } 
....................  
.................... void readFrequency() 
.................... { 
....................    printf(lcd_putc, "\f"); //Clear Screen 
*
0BD0:  MOV.B   #C,W0L
0BD2:  MOV.B   W0L,81C
0BD4:  CALL    700
....................     
....................    printf(lcd_putc, "Frequency:\n"); //Clear Screen 
0BD8:  MOV     #0,W1
0BDA:  MOV     W1,W0
0BDC:  CLR.B   1
0BDE:  CALL    2AA
0BE2:  INC     W1,W1
0BE4:  MOV     W1,[W15++]
0BE6:  MOV.B   W0L,81C
0BE8:  CALL    700
0BEC:  MOV     [--W15],W1
0BEE:  MOV     #A,W0
0BF0:  CPSGT   W1,W0
0BF2:  BRA     BDA
....................     
....................    if(frequency != 0) 
0BF4:  CP0     808
0BF6:  BRA     NZ,BFC
0BF8:  CP0     80A
0BFA:  BRA     Z,C06
....................    { 
....................       printf(lcd_putc, "%i",frequency); 
0BFC:  MOV     808,W0
0BFE:  MOV     80A,W1
0C00:  MOV     #0,W4
0C02:  CALL    AA0
....................    } 
0C06:  RETURN  
.................... } 
....................  
....................  
.................... void enterState(int state) 
.................... { 
....................    switch(state) 
*
1000:  MOV     814,W0
1002:  XOR     #1,W0
1004:  BRA     Z,1010
1006:  XOR     #3,W0
1008:  BRA     Z,1020
100A:  XOR     #1,W0
100C:  BRA     Z,102E
100E:  BRA     103C
....................    { 
....................       case 1: //Mani Menu 
....................          menuRefresh(selected); 
1010:  PUSH    80E
1012:  POP     818
1014:  CALL    7A6
....................          lcd_cursor_on(FALSE); 
1018:  CLR.B   818
101A:  CALL    A40
....................       break; 
101E:  BRA     103C
....................       case 2: //Single Sample 
....................          readFrequency(); 
1020:  CALL    BD0
....................          lcd_cursor_on(TRUE); 
1024:  MOV.B   #1,W0L
1026:  MOV.B   W0L,818
1028:  CALL    A40
....................       break; 
102C:  BRA     103C
....................       case 3: //Sweep 
....................          selected = 1; 
102E:  MOV     #1,W4
1030:  MOV     W4,80E
....................          sweepRefresh(selected); 
1032:  PUSH    80E
1034:  POP     818
1036:  CALL    C08
....................       break; 
103A:  BRA     103C
....................        
....................    } 
103C:  RETURN  
.................... } 
....................  
.................... void sweepRefresh(int selected) 
.................... { 
....................       printf(lcd_putc, "\f"); //Clear Screen 
*
0C08:  MOV.B   #C,W0L
0C0A:  MOV.B   W0L,81C
0C0C:  CALL    700
....................     
....................    if(selected == 1) 
0C10:  MOV     818,W4
0C12:  CP      W4,#1
0C14:  BRA     NZ,CAC
....................    { 
....................       printf(lcd_putc, "> "); 
0C16:  MOV.B   #3E,W0L
0C18:  MOV.B   W0L,81C
0C1A:  CALL    700
0C1E:  MOV.B   #20,W0L
0C20:  MOV.B   W0L,81C
0C22:  CALL    700
....................       printf(lcd_putc, "1 - 200k Hz\n"); 
0C26:  MOV     #0,W1
0C28:  MOV     W1,W0
0C2A:  CLR.B   1
0C2C:  CALL    2C2
0C30:  INC     W1,W1
0C32:  MOV     W1,[W15++]
0C34:  MOV.B   W0L,81C
0C36:  CALL    700
0C3A:  MOV     [--W15],W1
0C3C:  MOV     #B,W0
0C3E:  CPSGT   W1,W0
0C40:  BRA     C28
....................       printf(lcd_putc, "1 - 10 Hz\n"); 
0C42:  MOV     #0,W1
0C44:  MOV     W1,W0
0C46:  CLR.B   1
0C48:  CALL    2DC
0C4C:  INC     W1,W1
0C4E:  MOV     W1,[W15++]
0C50:  MOV.B   W0L,81C
0C52:  CALL    700
0C56:  MOV     [--W15],W1
0C58:  MOV     #9,W0
0C5A:  CPSGT   W1,W0
0C5C:  BRA     C44
....................       printf(lcd_putc, "10 - 100 Hz\n"); 
0C5E:  MOV     #0,W1
0C60:  MOV     W1,W0
0C62:  CLR.B   1
0C64:  CALL    2F4
0C68:  INC     W1,W1
0C6A:  MOV     W1,[W15++]
0C6C:  MOV.B   W0L,81C
0C6E:  CALL    700
0C72:  MOV     [--W15],W1
0C74:  MOV     #B,W0
0C76:  CPSGT   W1,W0
0C78:  BRA     C60
....................       printf(lcd_putc, "100 - 1k Hz\n"); 
0C7A:  MOV     #0,W1
0C7C:  MOV     W1,W0
0C7E:  CLR.B   1
0C80:  CALL    30E
0C84:  INC     W1,W1
0C86:  MOV     W1,[W15++]
0C88:  MOV.B   W0L,81C
0C8A:  CALL    700
0C8E:  MOV     [--W15],W1
0C90:  MOV     #B,W0
0C92:  CPSGT   W1,W0
0C94:  BRA     C7C
....................       lcd_gotoxy(20, 4); 
0C96:  MOV.B   #14,W0L
0C98:  MOV.B   W0L,822
0C9A:  MOV.B   #4,W0L
0C9C:  MOV.B   W0L,823
0C9E:  CALL    6A4
....................       printf(lcd_putc, ">"); 
0CA2:  MOV.B   #3E,W0L
0CA4:  MOV.B   W0L,81C
0CA6:  CALL    700
....................    } 
0CAA:  BRA     FFE
....................    else if(selected == 2) 
0CAC:  MOV     818,W4
0CAE:  CP      W4,#2
0CB0:  BRA     NZ,D48
....................    { 
....................       printf(lcd_putc, "1 - 200k Hz\n"); 
0CB2:  MOV     #0,W1
0CB4:  MOV     W1,W0
0CB6:  CLR.B   1
0CB8:  CALL    2C2
0CBC:  INC     W1,W1
0CBE:  MOV     W1,[W15++]
0CC0:  MOV.B   W0L,81C
0CC2:  CALL    700
0CC6:  MOV     [--W15],W1
0CC8:  MOV     #B,W0
0CCA:  CPSGT   W1,W0
0CCC:  BRA     CB4
....................       printf(lcd_putc, "> "); 
0CCE:  MOV.B   #3E,W0L
0CD0:  MOV.B   W0L,81C
0CD2:  CALL    700
0CD6:  MOV.B   #20,W0L
0CD8:  MOV.B   W0L,81C
0CDA:  CALL    700
....................       printf(lcd_putc, "1 - 10 Hz\n"); 
0CDE:  MOV     #0,W1
0CE0:  MOV     W1,W0
0CE2:  CLR.B   1
0CE4:  CALL    2DC
0CE8:  INC     W1,W1
0CEA:  MOV     W1,[W15++]
0CEC:  MOV.B   W0L,81C
0CEE:  CALL    700
0CF2:  MOV     [--W15],W1
0CF4:  MOV     #9,W0
0CF6:  CPSGT   W1,W0
0CF8:  BRA     CE0
....................       printf(lcd_putc, "10 - 100 Hz\n"); 
0CFA:  MOV     #0,W1
0CFC:  MOV     W1,W0
0CFE:  CLR.B   1
0D00:  CALL    2F4
0D04:  INC     W1,W1
0D06:  MOV     W1,[W15++]
0D08:  MOV.B   W0L,81C
0D0A:  CALL    700
0D0E:  MOV     [--W15],W1
0D10:  MOV     #B,W0
0D12:  CPSGT   W1,W0
0D14:  BRA     CFC
....................       printf(lcd_putc, "100 - 1k Hz\n"); 
0D16:  MOV     #0,W1
0D18:  MOV     W1,W0
0D1A:  CLR.B   1
0D1C:  CALL    30E
0D20:  INC     W1,W1
0D22:  MOV     W1,[W15++]
0D24:  MOV.B   W0L,81C
0D26:  CALL    700
0D2A:  MOV     [--W15],W1
0D2C:  MOV     #B,W0
0D2E:  CPSGT   W1,W0
0D30:  BRA     D18
....................       lcd_gotoxy(20, 4); 
0D32:  MOV.B   #14,W0L
0D34:  MOV.B   W0L,822
0D36:  MOV.B   #4,W0L
0D38:  MOV.B   W0L,823
0D3A:  CALL    6A4
....................       printf(lcd_putc, ">"); 
0D3E:  MOV.B   #3E,W0L
0D40:  MOV.B   W0L,81C
0D42:  CALL    700
....................    } 
0D46:  BRA     FFE
....................    else if(selected == 3) 
0D48:  MOV     818,W4
0D4A:  CP      W4,#3
0D4C:  BRA     NZ,DE4
....................    { 
....................       printf(lcd_putc, "1 - 200k Hz\n"); 
0D4E:  MOV     #0,W1
0D50:  MOV     W1,W0
0D52:  CLR.B   1
0D54:  CALL    2C2
0D58:  INC     W1,W1
0D5A:  MOV     W1,[W15++]
0D5C:  MOV.B   W0L,81C
0D5E:  CALL    700
0D62:  MOV     [--W15],W1
0D64:  MOV     #B,W0
0D66:  CPSGT   W1,W0
0D68:  BRA     D50
....................       printf(lcd_putc, "1 - 10 Hz\n"); 
0D6A:  MOV     #0,W1
0D6C:  MOV     W1,W0
0D6E:  CLR.B   1
0D70:  CALL    2DC
0D74:  INC     W1,W1
0D76:  MOV     W1,[W15++]
0D78:  MOV.B   W0L,81C
0D7A:  CALL    700
0D7E:  MOV     [--W15],W1
0D80:  MOV     #9,W0
0D82:  CPSGT   W1,W0
0D84:  BRA     D6C
....................       printf(lcd_putc, "> "); 
0D86:  MOV.B   #3E,W0L
0D88:  MOV.B   W0L,81C
0D8A:  CALL    700
0D8E:  MOV.B   #20,W0L
0D90:  MOV.B   W0L,81C
0D92:  CALL    700
....................       printf(lcd_putc, "10 - 100 Hz\n"); 
0D96:  MOV     #0,W1
0D98:  MOV     W1,W0
0D9A:  CLR.B   1
0D9C:  CALL    2F4
0DA0:  INC     W1,W1
0DA2:  MOV     W1,[W15++]
0DA4:  MOV.B   W0L,81C
0DA6:  CALL    700
0DAA:  MOV     [--W15],W1
0DAC:  MOV     #B,W0
0DAE:  CPSGT   W1,W0
0DB0:  BRA     D98
....................       printf(lcd_putc, "100 - 1k Hz\n"); 
0DB2:  MOV     #0,W1
0DB4:  MOV     W1,W0
0DB6:  CLR.B   1
0DB8:  CALL    30E
0DBC:  INC     W1,W1
0DBE:  MOV     W1,[W15++]
0DC0:  MOV.B   W0L,81C
0DC2:  CALL    700
0DC6:  MOV     [--W15],W1
0DC8:  MOV     #B,W0
0DCA:  CPSGT   W1,W0
0DCC:  BRA     DB4
....................       lcd_gotoxy(20, 4); 
0DCE:  MOV.B   #14,W0L
0DD0:  MOV.B   W0L,822
0DD2:  MOV.B   #4,W0L
0DD4:  MOV.B   W0L,823
0DD6:  CALL    6A4
....................       printf(lcd_putc, ">"); 
0DDA:  MOV.B   #3E,W0L
0DDC:  MOV.B   W0L,81C
0DDE:  CALL    700
....................    } 
0DE2:  BRA     FFE
....................    else if(selected == 4) 
0DE4:  MOV     818,W4
0DE6:  CP      W4,#4
0DE8:  BRA     NZ,E80
....................    { 
....................       printf(lcd_putc, "1 - 200k Hz\n"); 
0DEA:  MOV     #0,W1
0DEC:  MOV     W1,W0
0DEE:  CLR.B   1
0DF0:  CALL    2C2
0DF4:  INC     W1,W1
0DF6:  MOV     W1,[W15++]
0DF8:  MOV.B   W0L,81C
0DFA:  CALL    700
0DFE:  MOV     [--W15],W1
0E00:  MOV     #B,W0
0E02:  CPSGT   W1,W0
0E04:  BRA     DEC
....................       printf(lcd_putc, "1 - 10 Hz\n"); 
0E06:  MOV     #0,W1
0E08:  MOV     W1,W0
0E0A:  CLR.B   1
0E0C:  CALL    2DC
0E10:  INC     W1,W1
0E12:  MOV     W1,[W15++]
0E14:  MOV.B   W0L,81C
0E16:  CALL    700
0E1A:  MOV     [--W15],W1
0E1C:  MOV     #9,W0
0E1E:  CPSGT   W1,W0
0E20:  BRA     E08
....................       printf(lcd_putc, "10 - 100 Hz\n"); 
0E22:  MOV     #0,W1
0E24:  MOV     W1,W0
0E26:  CLR.B   1
0E28:  CALL    2F4
0E2C:  INC     W1,W1
0E2E:  MOV     W1,[W15++]
0E30:  MOV.B   W0L,81C
0E32:  CALL    700
0E36:  MOV     [--W15],W1
0E38:  MOV     #B,W0
0E3A:  CPSGT   W1,W0
0E3C:  BRA     E24
....................       printf(lcd_putc, "> "); 
0E3E:  MOV.B   #3E,W0L
0E40:  MOV.B   W0L,81C
0E42:  CALL    700
0E46:  MOV.B   #20,W0L
0E48:  MOV.B   W0L,81C
0E4A:  CALL    700
....................       printf(lcd_putc, "100 - 1k Hz\n"); 
0E4E:  MOV     #0,W1
0E50:  MOV     W1,W0
0E52:  CLR.B   1
0E54:  CALL    30E
0E58:  INC     W1,W1
0E5A:  MOV     W1,[W15++]
0E5C:  MOV.B   W0L,81C
0E5E:  CALL    700
0E62:  MOV     [--W15],W1
0E64:  MOV     #B,W0
0E66:  CPSGT   W1,W0
0E68:  BRA     E50
....................       lcd_gotoxy(20, 4); 
0E6A:  MOV.B   #14,W0L
0E6C:  MOV.B   W0L,822
0E6E:  MOV.B   #4,W0L
0E70:  MOV.B   W0L,823
0E72:  CALL    6A4
....................       printf(lcd_putc, ">"); 
0E76:  MOV.B   #3E,W0L
0E78:  MOV.B   W0L,81C
0E7A:  CALL    700
....................    } //BACK HALF BELOW 
0E7E:  BRA     FFE
....................    else if(selected == 5) 
0E80:  MOV     818,W4
0E82:  CP      W4,#5
0E84:  BRA     NZ,F00
....................    { 
....................       printf(lcd_putc, "> "); 
0E86:  MOV.B   #3E,W0L
0E88:  MOV.B   W0L,81C
0E8A:  CALL    700
0E8E:  MOV.B   #20,W0L
0E90:  MOV.B   W0L,81C
0E92:  CALL    700
....................       printf(lcd_putc, "1k - 10k Hz\n"); 
0E96:  MOV     #0,W1
0E98:  MOV     W1,W0
0E9A:  CLR.B   1
0E9C:  CALL    328
0EA0:  INC     W1,W1
0EA2:  MOV     W1,[W15++]
0EA4:  MOV.B   W0L,81C
0EA6:  CALL    700
0EAA:  MOV     [--W15],W1
0EAC:  MOV     #B,W0
0EAE:  CPSGT   W1,W0
0EB0:  BRA     E98
....................       printf(lcd_putc, "10k - 100k Hz\n"); 
0EB2:  MOV     #0,W1
0EB4:  MOV     W1,W0
0EB6:  CLR.B   1
0EB8:  CALL    342
0EBC:  INC     W1,W1
0EBE:  MOV     W1,[W15++]
0EC0:  MOV.B   W0L,81C
0EC2:  CALL    700
0EC6:  MOV     [--W15],W1
0EC8:  MOV     #D,W0
0ECA:  CPSGT   W1,W0
0ECC:  BRA     EB4
....................       printf(lcd_putc, "100k - 200k Hz\n"); 
0ECE:  MOV     #0,W1
0ED0:  MOV     W1,W0
0ED2:  CLR.B   1
0ED4:  CALL    35E
0ED8:  INC     W1,W1
0EDA:  MOV     W1,[W15++]
0EDC:  MOV.B   W0L,81C
0EDE:  CALL    700
0EE2:  MOV     [--W15],W1
0EE4:  MOV     #E,W0
0EE6:  CPSGT   W1,W0
0EE8:  BRA     ED0
....................       lcd_gotoxy(20, 4); 
0EEA:  MOV.B   #14,W0L
0EEC:  MOV.B   W0L,822
0EEE:  MOV.B   #4,W0L
0EF0:  MOV.B   W0L,823
0EF2:  CALL    6A4
....................       printf(lcd_putc, "<"); 
0EF6:  MOV.B   #3C,W0L
0EF8:  MOV.B   W0L,81C
0EFA:  CALL    700
....................    } 
0EFE:  BRA     FFE
....................    else if(selected == 6) 
0F00:  MOV     818,W4
0F02:  CP      W4,#6
0F04:  BRA     NZ,F80
....................    { 
....................       printf(lcd_putc, "1k - 10k Hz\n"); 
0F06:  MOV     #0,W1
0F08:  MOV     W1,W0
0F0A:  CLR.B   1
0F0C:  CALL    328
0F10:  INC     W1,W1
0F12:  MOV     W1,[W15++]
0F14:  MOV.B   W0L,81C
0F16:  CALL    700
0F1A:  MOV     [--W15],W1
0F1C:  MOV     #B,W0
0F1E:  CPSGT   W1,W0
0F20:  BRA     F08
....................       printf(lcd_putc, "> "); 
0F22:  MOV.B   #3E,W0L
0F24:  MOV.B   W0L,81C
0F26:  CALL    700
0F2A:  MOV.B   #20,W0L
0F2C:  MOV.B   W0L,81C
0F2E:  CALL    700
....................       printf(lcd_putc, "10k - 100k Hz\n"); 
0F32:  MOV     #0,W1
0F34:  MOV     W1,W0
0F36:  CLR.B   1
0F38:  CALL    342
0F3C:  INC     W1,W1
0F3E:  MOV     W1,[W15++]
0F40:  MOV.B   W0L,81C
0F42:  CALL    700
0F46:  MOV     [--W15],W1
0F48:  MOV     #D,W0
0F4A:  CPSGT   W1,W0
0F4C:  BRA     F34
....................       printf(lcd_putc, "100k - 200k Hz\n"); 
0F4E:  MOV     #0,W1
0F50:  MOV     W1,W0
0F52:  CLR.B   1
0F54:  CALL    35E
0F58:  INC     W1,W1
0F5A:  MOV     W1,[W15++]
0F5C:  MOV.B   W0L,81C
0F5E:  CALL    700
0F62:  MOV     [--W15],W1
0F64:  MOV     #E,W0
0F66:  CPSGT   W1,W0
0F68:  BRA     F50
....................       lcd_gotoxy(20, 4); 
0F6A:  MOV.B   #14,W0L
0F6C:  MOV.B   W0L,822
0F6E:  MOV.B   #4,W0L
0F70:  MOV.B   W0L,823
0F72:  CALL    6A4
....................       printf(lcd_putc, "<"); 
0F76:  MOV.B   #3C,W0L
0F78:  MOV.B   W0L,81C
0F7A:  CALL    700
....................    } 
0F7E:  BRA     FFE
....................    else if(selected == 7) 
0F80:  MOV     818,W4
0F82:  CP      W4,#7
0F84:  BRA     NZ,FFE
....................    { 
....................       printf(lcd_putc, "1k - 10k Hz\n"); 
0F86:  MOV     #0,W1
0F88:  MOV     W1,W0
0F8A:  CLR.B   1
0F8C:  CALL    328
0F90:  INC     W1,W1
0F92:  MOV     W1,[W15++]
0F94:  MOV.B   W0L,81C
0F96:  CALL    700
0F9A:  MOV     [--W15],W1
0F9C:  MOV     #B,W0
0F9E:  CPSGT   W1,W0
0FA0:  BRA     F88
....................       printf(lcd_putc, "10k - 100k Hz\n"); 
0FA2:  MOV     #0,W1
0FA4:  MOV     W1,W0
0FA6:  CLR.B   1
0FA8:  CALL    342
0FAC:  INC     W1,W1
0FAE:  MOV     W1,[W15++]
0FB0:  MOV.B   W0L,81C
0FB2:  CALL    700
0FB6:  MOV     [--W15],W1
0FB8:  MOV     #D,W0
0FBA:  CPSGT   W1,W0
0FBC:  BRA     FA4
....................       printf(lcd_putc, "> "); 
0FBE:  MOV.B   #3E,W0L
0FC0:  MOV.B   W0L,81C
0FC2:  CALL    700
0FC6:  MOV.B   #20,W0L
0FC8:  MOV.B   W0L,81C
0FCA:  CALL    700
....................       printf(lcd_putc, "100k - 200k Hz\n"); 
0FCE:  MOV     #0,W1
0FD0:  MOV     W1,W0
0FD2:  CLR.B   1
0FD4:  CALL    35E
0FD8:  INC     W1,W1
0FDA:  MOV     W1,[W15++]
0FDC:  MOV.B   W0L,81C
0FDE:  CALL    700
0FE2:  MOV     [--W15],W1
0FE4:  MOV     #E,W0
0FE6:  CPSGT   W1,W0
0FE8:  BRA     FD0
....................       lcd_gotoxy(20, 4); 
0FEA:  MOV.B   #14,W0L
0FEC:  MOV.B   W0L,822
0FEE:  MOV.B   #4,W0L
0FF0:  MOV.B   W0L,823
0FF2:  CALL    6A4
....................       printf(lcd_putc, "<"); 
0FF6:  MOV.B   #3C,W0L
0FF8:  MOV.B   W0L,81C
0FFA:  CALL    700
....................    } 
0FFE:  RETURN  
....................     
.................... } 
....................  
.................... void waitForResponse() 
*
132A:  MOV     W5,[W15++]
.................... { 
....................    disableKeypad(); 
132C:  CALL    A38
....................     
....................    while(serial_flag != 0)//While end is not done 
1330:  BTSS.B  804.0
1332:  BRA     1384
....................    { 
....................        
....................       if(UARTKey == '!') 
1334:  MOV     806,W4
1336:  XOR.B   #21,W4L
1338:  BRA     NZ,135E
....................       { 
....................          lcd_clear(); 
133A:  CALL    1316
....................          printf(lcd_putc, "System is Busy"); 
133E:  MOV     #0,W1
1340:  MOV     W1,W0
1342:  CLR.B   1
1344:  CALL    37A
1348:  INC     W1,W1
134A:  MOV     W1,[W15++]
134C:  MOV.B   W0L,81C
134E:  CALL    700
1352:  MOV     [--W15],W1
1354:  MOV     #D,W0
1356:  CPSGT   W1,W0
1358:  BRA     1340
....................          serial_flag = 1; 
135A:  BSET.B  804.0
....................       } 
135C:  BRA     1382
....................       else if(UARTKey == '#') 
135E:  MOV     806,W4
1360:  XOR.B   #23,W4L
1362:  BRA     NZ,1368
....................       { 
....................          serial_flag = 1; //Data is Done 
1364:  BSET.B  804.0
....................       } 
1366:  BRA     1382
....................       else 
....................       { 
....................          printf(lcd_putc, UARTKey); 
1368:  MOV.B   806,W0L
136A:  MOV.B   W0L,2
136C:  CLR.B   3
136E:  CP0.B   [W1]
1370:  BRA     Z,1382
1372:  MOV     W1,[W15++]
1374:  MOV.B   [W1+#0],W0L
1376:  MOV.B   W0L,81C
1378:  CALL    700
137C:  MOV     [--W15],W1
137E:  INC     W1,W1
1380:  BRA     136E
....................       } 
1382:  BRA     1330
....................    } 
....................     
....................    enableKeypad(); 
1384:  CALL    1320
1388:  MOV     [--W15],W5
138A:  RETURN  
.................... } 
....................  
.................... void screenClearedDisplay(void) 
.................... { 
....................    disableKeypad(); 
138C:  CALL    A38
....................     
....................    lcd_clear(); 
1390:  CALL    1316
....................    printf(lcd_putc , "Terminal Clear"); 
1394:  MOV     #0,W1
1396:  MOV     W1,W0
1398:  CLR.B   1
139A:  CALL    396
139E:  INC     W1,W1
13A0:  MOV     W1,[W15++]
13A2:  MOV.B   W0L,81C
13A4:  CALL    700
13A8:  MOV     [--W15],W1
13AA:  MOV     #D,W0
13AC:  CPSGT   W1,W0
13AE:  BRA     1396
....................     
....................    enableKeypad(); 
13B0:  CALL    1320
13B4:  RETURN  
.................... } 

Configuration Fuses:
   Word  1L: 000F   NOWRTB NOBSS
          H: 0000  
   Word  2L: 0000  
          H: 0000  
   Word  3L: 0003   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 00E1   FRC_PLL SOSC_ANALOG LPRCHIGH IESO
          H: 0000  
   Word  5L: 003B   NOPR OSCIO POSCFREQ_H SOSC_HIGH CKSFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WDT128 WINDIS NOWDT
          H: 0000  
   Word  7L: 009C   NOBROWNOUT PUT NOALTI2C1 BORV_LOW MCLR
          H: 0000  
   Word  8L: 0083   ICSP1 NODEBUG
          H: 0000  
